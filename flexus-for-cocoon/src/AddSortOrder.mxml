<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="*"
				title="New sort order"
				showCloseButton="true"
				creationComplete="init()"
				close="removeMe();"  width="367" height="230">
	
	
	<mx:Metadata>
		
		[Event(name="newSortOrder", type="flash.event.Event")]
		
	</mx:Metadata>
	
	<mx:Script>
		<![CDATA[
			import mx.events.ValidationResultEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			import mx.core.FlexGlobals;
			import mx.collections.ArrayCollection;
			
			
			import nl.mpi.lexus.LexusUtil;
			import nl.mpi.lexus.service.LexusService;
			import nl.mpi.lexus.YesNo;
			
			
			[Bindable]
			public var sortOrder: Object;
			[Bindable][Embed(source="../assets/images/iconza_24x24/warning_24x24.png")] private var warnIcon:Class;
			[Bindable]
			private var application:Object = FlexGlobals.topLevelApplication;			
			private var _sortOrders:ArrayCollection;
			/**
			 * Initializing, a new lexicon is created
			 * */ 
			private function init():void{
				this.sortOrder = new Object();
				this.sortOrder.data = null;
				this.sortOrder_name.setFocus();
			}
			
			public function set sortOrders(value:ArrayCollection):void
			{
				_sortOrders = value;
			}
			
			/**
			 * Attempts to store the lexicon to the server. The (succesfull) response os forwarded to onSaveResult
			 **/ 
			private function requestSave():void {
				saveBtn.enabled = false;
				cancelBtn.enabled = false;
				var lexusService:LexusService = new LexusService();
				lexusService.send("LexusWorkspaceEditor/createSortOrder.json", this.sortOrder, "workspace", onSaveResult);
			}
			/**
			 * Callback method for the server lexicon save response. A new Event is dispatched to signal creation of a new lexicon.
			 * 
			 **/ 
			private function onSaveResult(event:ResultEvent):void {
				LexusUtil.parseJSON(String(event.result),
					function(data:Object):void {
						var responseData:Object = data;   
						sortOrder = responseData.result.sortOrder;
						sortOrder.isNew = true;
						var evnt:Event = new Event("newSortOrder");
						dispatchEvent(evnt); 
						removeMe();
					}
				);
			}
			
			private function removeMe():void { 
				PopUpManager.removePopUp(this);
			}
			
			/**
			 * Key event handler for the save button.If enter is pressed the lexicon is propogated to the server
			 **/ 
			private function onKeyUpSave(event:KeyboardEvent):void{
				//Enter pressed
				if( event.keyCode == 13)
					this.requestSave();
				
			}
			/**
			 * Key event handler for the cancel button
			 **/ 
			private function onKeyUpCancel(event:KeyboardEvent):void{
				//Enter pressed
				if( event.keyCode == 13)
					removeMe();
			}
			/**
			 *  Event listener for the valid and invalid events.
			 **/ 
			private function handleValid(eventObj:ValidationResultEvent):void {
				if(eventObj.type==ValidationResultEvent.VALID)
				{this.sortOrderNameCheck(eventObj);
					}
				else
				{   saveBtn.enabled = false;
					warnIco.visible = true;
				}
			
			}
			
			protected function sortOrderNameCheck(event:Event):void
			{
				switch( this.checkNewName()){
					//success
					case 0:
						warnIco.visible = false;
						saveBtn.enabled = true;
						break;
					case 001:
						warnIco.visible = true;
						saveBtn.enabled = false;
						break;					
				}
			}
			
			protected function checkNewName():int
			{
				var invalid:int = 0;
				for each (var item:Object in this._sortOrders ){
					if (item.name == sortOrder_name.text){
						invalid = 001;
					}
				}
				return invalid;	
			}
			
		
			
			
			
		]]>
	</mx:Script>
	<mx:StringValidator id="reqValid" source="{sortOrder_name}" property="text" triggerEvent="change"
						minLength="1" valid="handleValid(event)" invalid="handleValid(event)"/>
	
	<mx:Canvas width="100%" height="100%">
		<mx:Grid width="100%">
			<mx:GridRow>
				<mx:GridItem>
					<mx:Label text="Name:"/>
				</mx:GridItem>
				<mx:GridItem>
					<mx:TextInput id="sortOrder_name" text="{sortOrder.name}" />	
				</mx:GridItem>					
				<mx:GridItem verticalAlign="middle">
					<mx:Image id="warnIco" source="{warnIcon}" visible="false" 
							  toolTip="The name &quot;{sortOrder_name.text}&quot; is already assigned to another sort order. &#xa;Please choose a different name for this sort order or rename the already existing one first!"
							  height="16" width="16"/>
				</mx:GridItem>
			</mx:GridRow>
			<mx:GridRow>
				<mx:GridItem>
					<mx:Label text="Description:"/>
				</mx:GridItem>
				<mx:GridItem>
					<mx:TextArea id="sortOrder_description" text="{sortOrder.description}"/>	
				</mx:GridItem>	
				
			</mx:GridRow>
			
		</mx:Grid>
	</mx:Canvas>
	
	<mx:ControlBar horizontalAlign="right" width="100%">
		<mx:Button id="saveBtn" label="Save" click="requestSave();" keyUp="onKeyUpSave(event)" enabled="false"/>
		<mx:Button id="cancelBtn" label="Cancel" click="removeMe();"  keyUp="onKeyUpCancel(event)" enabled="true"/>
	</mx:ControlBar>
	<mx:Binding source="sortOrder_name.text" destination="sortOrder.name"/>
	<mx:Binding source="sortOrder_description.text" destination="sortOrder.description"/>
</mx:TitleWindow>
<?xml version="1.0" encoding="utf-8"?>

<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="400" height="300"
	creationComplete="init()"  xmlns:local="*" xmlns:flexlib="http://code.google.com/p/flexlib/">
	<mx:Script>
		<![CDATA[
			import flexlib.controls.SuperTabBar;
			import flexlib.containers.SuperTabNavigator;
			import flexlib.controls.tabBarClasses.SuperTab;
			
			import mx.collections.ArrayCollection;
			import mx.controls.DataGrid;
			import mx.core.FlexGlobals;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			import nl.mpi.lexus.LexusUtil;
			import nl.mpi.lexus.YesNo;
			import nl.mpi.lexus.event.QueryEvent;
			import nl.mpi.lexus.service.LexusService;
			
			
			[Bindable] public var _queries:Array;
			[Bindable] public var _searchQueries:ArrayCollection;
			[Bindable] private var _lexica:Object; 

			private var lexusService:LexusService = new LexusService();
			
			private function init():void {
				queryBuilder.addEventListener(QueryEvent.ADD, this.handleQueryUpdate);
				queryBuilder.addEventListener(QueryEvent.DELETE, this.handleQueryUpdate);
				searchTypeTab.setClosePolicyForTab(0, flexlib.controls.tabBarClasses.SuperTab.CLOSE_NEVER);
				searchTypeTab.setClosePolicyForTab(1, flexlib.controls.tabBarClasses.SuperTab.CLOSE_NEVER);
			}
			
			
			private function handleQueryUpdate(event:Event):void {
				this.initQueriesList(queryBuilder.queries);
			}
			
			public function activated(queries:Array):void {
				if (queries != null) {
					queryBuilder.queries = queries;
					initQueriesList(queries);
				}
				else {
					this.lexusService.send("LexusWorkspaceEditor/loadWSQueries.json", null, this.name, onWorkspaceQueriesLoad);
				}
			}
			
			
			private function onWorkspaceQueriesLoad(event:ResultEvent):void {
				LexusUtil.parseJSON(String(event.result),
					function(data:Object):void {
						var qs:Array = data.result.queries as Array;
						queryBuilder.queries = qs;
						initQueriesList(qs);
					}
				);
			}
			
			public function get lexica():Object {
				return _lexica;
			}
			
			[Bindable]
			public function set lexica(lexica:Object):void {
				var source:ArrayCollection = new ArrayCollection( (lexica as Array));
				var lxColl:ArrayCollection = new ArrayCollection();
				for (var i:int = 0; i < source.length; i++)
					lxColl.addItem(source.getItemAt(i));
				
				var emptyLexicon:Object = new Object();
				emptyLexicon.name="<Select lexicon>";
				lxColl.addItemAt( emptyLexicon, 0);
				this._lexica = lxColl;
			}
			
			
			public function set queries(queries:Array):void {
				initQueriesList(queries);
			}
			
			private function initQueriesList(queries:Array):void {
				this._queries = queries;
				var source:ArrayCollection = new ArrayCollection(queries);
				var qColl:ArrayCollection = new ArrayCollection();
				for( var i:int = 0; i < source.length; i++)
					qColl.addItem( source.getItemAt(i));
				
				var emptyQuery:Object = new Object();
				emptyQuery.name = "<Select query>";
				qColl.addItemAt( emptyQuery, 0);
				this._searchQueries = qColl;
			}
			
			
					
			public function requestSave(): Boolean {
				if (saveNeeded()) {
					queryBuilder.requestSave();
					return true;
				}
				return false;
			}
			
			
			public function saveNeeded(): Boolean {
				return queryBuilder.saveNeeded();
			}
			
			public function save():void {
				queryBuilder.save();
			}

			public function executeQuery(query:Object):void {
				var result:QueryResults = new QueryResults();
				result.query = query;
				result.label = "Result for ad hoc query";
				searchTypeTab.addChild(result);
				searchTypeTab.selectedChild = result;
			}
			
			
			private function onQueryChange():void{
				if( this.queryList.selectedItem.hasOwnProperty("id")) {
					var result:QueryResults = new QueryResults();
					result.query = this.queryList.selectedItem;
					result.label = "Result for "+this.queryList.selectedItem.name;
					searchTypeTab.addChild(result);
					searchTypeTab.selectedChild = result;
					searchTypeTab.setClosePolicyForTab(searchTypeTab.length, flexlib.controls.tabBarClasses.SuperTab.CLOSE_ROLLOVER);
				}
			}
			
		]]>
	</mx:Script>
	<mx:VBox id="main" width="100%" height="100%" horizontalAlign="left"
			 focusIn="FlexGlobals.topLevelApplication.overlayUnicodeInput(event)">
		<flexlib:SuperTabNavigator id="searchTypeTab" width="100%" height="100%" creationPolicy="all" dragEnabled="false">
			<mx:Canvas label="Queries" width="100%" height="100%">
				<mx:VBox width="100%" height="100%" horizontalAlign="left">
					<mx:HBox width="100%" height="10%" horizontalAlign="left">
						<mx:Label text="Search using query: "/>
						<mx:ComboBox id="queryList" dataProvider="{this._searchQueries}" labelField="name"/>
						<mx:Button id="go" click="onQueryChange()" label="Go"/>
					</mx:HBox>
					<mx:Label text="... or create and modify your queries here: "/>
					<mx:Panel width="100%" height="90%" title="Query builder" paddingTop="10" paddingLeft="10">
						
						<local:QueryBuilder id="queryBuilder" width="100%" height="100%"
											queries="{_queries}"/>
					</mx:Panel>
				</mx:VBox>
			</mx:Canvas>
			<local:AdHocSearch id="adhoc" searchComponent="{this}"/>
		</flexlib:SuperTabNavigator>
	</mx:VBox>

</mx:Canvas>

<?xml version="1.0" encoding="utf-8"?>

<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="400" height="300"
		   creationComplete="init()"  xmlns:local="*" xmlns:flexlib="http://code.google.com/p/flexlib/">
	<mx:Script>
		<![CDATA[
			import flexlib.containers.SuperTabNavigator;
			import flexlib.controls.tabBarClasses.SuperTab;
			
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			
			import nl.mpi.lexus.LexusUtil;
			import nl.mpi.lexus.event.QueryEvent;
			import nl.mpi.lexus.service.LexusService;
			
			
			[Bindable] private var _queries:ArrayCollection;
			[Bindable] private var _lexica:Object; 
			[Bindable] public var _searchQueries:ArrayCollection;
			
			private var lexusService:LexusService = new LexusService();
			
			public function get lexica():Object {
				return _lexica;
			}
			
			[Bindable]
			public function set lexica(lexica:Object):void {
				var source:ArrayCollection = new ArrayCollection( (lexica as Array));
				var lxColl:ArrayCollection = new ArrayCollection();
				for (var i:int = 0; i < source.length; i++)
					lxColl.addItem(source.getItemAt(i));
				
				var emptyLexicon:Object = new Object();
				emptyLexicon.name="<Select lexicon>";
				lxColl.addItemAt( emptyLexicon, 0);
				this._lexica = lxColl;
			}
			
			public function get queries():ArrayCollection {
				return _queries;
			}
			
			
			private function init():void {
				queryBuilder.addEventListener(QueryEvent.ADD, this.handleQueryUpdate);
				queryBuilder.addEventListener(QueryEvent.SAVE, this.handleQueryUpdate);
				queryBuilder.addEventListener(QueryEvent.DELETE, this.handleQueryUpdate);
				searchTypeTab.setClosePolicyForTab(0, flexlib.controls.tabBarClasses.SuperTab.CLOSE_NEVER);
				searchTypeTab.setClosePolicyForTab(1, flexlib.controls.tabBarClasses.SuperTab.CLOSE_NEVER);
			}
			
			
			private function handleQueryUpdate(event:QueryEvent):void {
				//Refresh the copy of the queries stored at the application level
				//But remove evetual new unsaved queries (id="")
				var tmpQueries:ArrayCollection = ObjectUtil.copy(queryBuilder.queryBuilderList.queryList.dataProvider as ArrayCollection) as ArrayCollection;
				for each(var tmpQuery:Object in tmpQueries){
					if (tmpQuery.id == "")
						tmpQueries.removeItemAt(tmpQueries.getItemIndex(tmpQuery));
				}
				FlexGlobals.topLevelApplication.queries = ObjectUtil.copy(tmpQueries);
			}
			
			public function activated():void {
				if (queryBuilder.queries == null) {
					this.lexusService.send("LexusWorkspaceEditor/loadWSQueries.json", null, this.name, onWorkspaceQueriesLoad);
				}
			}
			
			
			private function onWorkspaceQueriesLoad(event:ResultEvent):void {
				LexusUtil.parseJSON(String(event.result),
					function(data:Object):void {
						var qs:ArrayCollection = new ArrayCollection(data.result.queries);
						queryBuilder.queries = qs;
						
						//AAM:Save the original object at the application level, so we can reload it when the user cancels changes.
						FlexGlobals.topLevelApplication.queries = ObjectUtil.copy(qs);
					}
				);
			}
			
			
			
			public function requestSave(): Boolean {
				if (saveNeeded()) {
					queryBuilder.requestSave();
					return true;
				}
				return false;
			}
			
			
			public function saveNeeded(): Boolean {
				return queryBuilder.saveNeeded();
			}
			
			public function save():void {
				queryBuilder.save();
			}
			
			public function executeAdHoc(query:Object):void {
				var result:QueryResults = new QueryResults();
				result.query = query;
				result.label = "Ad hoc search: " + generateTabName(query.children[0].children[0]);
				searchTypeTab.addChild(result);
				searchTypeTab.selectedChild = result;
			}
			
			public function generateTabName(searchParm:Object):String{
				var title:String = "";
				var value:String = "\"" + searchParm.value + "\"";
				var lexicon:String = adhoc.lexicaList.selectedItem.name;
				var dc:String = "\"" + adhoc.dcList.selectedItem.name + "\"";
				var condition:String = adhoc.dc_condition.selectedItem.condition;
				
				if (adhoc.negationBox.selected){
					if(condition.indexOf(" ") != -1)
						condition = condition.replace(" ", " not ");
					else
						condition = condition + " not";						
				}
				title = dc + " " + condition + " " + value + ", in " + lexicon + ".";
				
				return title;
			}
			
			
			public function executeQuery():void{
				if( this.queryBuilder.queryBuilderList.queryList.selectedItem.hasOwnProperty("id")) {
					var result:QueryResults = new QueryResults();
					result.query = this.queryBuilder.queryBuilderList.queryList.selectedItem;
					var label:String = this.queryBuilder.queryBuilderList.queryList.selectedItem.name;
					if ((this.queryBuilder.queryEditor.title.title as String).lastIndexOf("\*") != -1)
						label += "*";
					result.label = label;
					searchTypeTab.addChild(result);
					searchTypeTab.selectedChild = result;
					searchTypeTab.setClosePolicyForTab(searchTypeTab.length, flexlib.controls.tabBarClasses.SuperTab.CLOSE_ROLLOVER);
				}
			}
			
		]]>
	</mx:Script>
	<mx:VBox id="main" width="100%" height="100%" horizontalAlign="left"
			 focusIn="FlexGlobals.topLevelApplication.overlayUnicodeInput(event)">
		<flexlib:SuperTabNavigator id="searchTypeTab" width="100%" height="100%" creationPolicy="all" dragEnabled="false">
			<mx:Canvas label="Query search" width="100%" height="100%">
				<mx:Panel width="100%" height="100%" title="Query builder" paddingTop="10" paddingLeft="10">
					
					<local:QueryBuilder id="queryBuilder" width="100%" height="100%"
										queries="{_queries}" searchComponent="{this}"/>
				</mx:Panel>
			</mx:Canvas>
			<local:AdHocSearch id="adhoc" searchComponent="{this}"/>
		</flexlib:SuperTabNavigator>
	</mx:VBox>
</mx:Canvas>

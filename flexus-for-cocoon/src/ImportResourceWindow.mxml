<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="*"
    title="Import resource"
    showCloseButton="true"
    close="PopUpManager.removePopUp(this);"  width="600" height="360">

	<mx:Metadata>
       [Event(name="complete", type="nl.mpi.lexus.event.ImportCompleteEvent")]
    </mx:Metadata>
    

    <mx:Script>
        <![CDATA[
        	import com.adobe.serialization.json.JSON;
        	
        	import mx.events.ValidationResultEvent;
        	import mx.managers.PopUpManager;
        	import mx.rpc.events.ResultEvent;
        	import mx.utils.StringUtil;
        	
        	import nl.mpi.lexus.LexusUtil;
        	import nl.mpi.lexus.YesNo;
        	import nl.mpi.lexus.event.ImportCompleteEvent;
        	import nl.mpi.lexus.service.LexusService;          
                    
            
            public var source: String;
            
            [Bindable]
            private var archiveData:Object;
            
            public var sessionId:String;
            private var resourceFileStagingID:String;
            
            private var nodeId:String;
            
            private var resourceReference:FileReference = null;
            
            private var lexusService:LexusService = new LexusService();
          
            private function onKeyUpOk(event:KeyboardEvent):void{
            	//Enter pressed
            	if( event.keyCode == 13)
	               PopUpManager.removePopUp(this);
            }
            
            private function onKeyUpCancel(event:KeyboardEvent):void{
            	//Enter pressed
            	if( event.keyCode == 13)
	               PopUpManager.removePopUp(this);
            }
            
            private function importResource():void{
            	resourceReference = new FileReference();
            	resourceReference.addEventListener(Event.SELECT, resourceSelectHandler);
           		resourceReference.addEventListener(Event.CANCEL, resourceCancelHandler);
           		resourceReference.browse();
            }
            
            /**
             * Event handler for when a user has selected a resource to upload
             **/
           private function resourceSelectHandler(event:Event):void {           		
	            var uploadURLdata:URLRequest = new URLRequest("StagingFileHandler/uploadFile.json;jsessionid=" + this.sessionId);
				var variables:URLVariables = new URLVariables();
            	variables.requestId = this.name;
				uploadURLdata.data = variables;				
				
				resourceReference.addEventListener(Event.COMPLETE, completeHandler);
				resourceReference.addEventListener(DataEvent.UPLOAD_COMPLETE_DATA,resourceUploadCompleteDataHandler);
				resourceReference.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);
           		resourceReference.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
           		resourceReference.addEventListener(ProgressEvent.PROGRESS, progressHandler);
           		resourceReference.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);

				resourceReference.upload(uploadURLdata, "resource");
         	}
         	
         	private function resourceUploadCompleteDataHandler(event:DataEvent):void {
            	trace("resource uploadCompleteData: " + event);
            	
            	var rawData:String = String(event.data);
            	var result:Object = (com.adobe.serialization.json.JSON.decode(rawData) as Object).result;
            	
	            this.currentState = "localResource";
            	resourceFileStagingID = result.resource; //data is the field specified in the dataFileREf.upload request
            	this.fileName.text = result.Filename;
            	this.mimeType.text = result.mimeType;
            }
            
             /**
           	* Event handler for the cancel event on the resource browse window.
           	**/ 
          		 private function resourceCancelHandler( event:Event):void{
           		this.enabled = true;
           	}
            private function completeHandler(event:Event):void {
            	trace("completeHandler: " + event);
            }
         	private function httpStatusHandler(event:HTTPStatusEvent):void {
            	trace("httpStatusHandler: " + event);
            }
        
        	private function ioErrorHandler(event:IOErrorEvent):void {
            	trace("ioErrorHandler: " + event);
        	}
			private function progressHandler(event:ProgressEvent):void {
            	var file:FileReference = FileReference(event.target);
            	trace("progressHandler name=" + file.name + " bytesLoaded=" + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);
        	}

        	private function securityErrorHandler(event:SecurityErrorEvent):void {
         	   trace("securityErrorHandler: " + event);
        	 }
        	 
        	 private function getArchiveObject():void{
        	 	var parameter:Object = new Object();
        	 	parameter.id = this.archiveHandle.text;
				this.getResource.enabled = false;
        	 	this.lexusService.send("Archive/getImdiArchiveObject.json", parameter, this.name, onJSONLoad);
        	 }
        	 /**
			 * Event Handler for the onLoad event for the archive object data. 
			 * This will load the JSON object and perform initial initialization
			 * */
			private function onJSONLoad(event:ResultEvent):void
			{
				LexusUtil.parseJSON(String(event.result),
					function(data:Object):void {
						archiveData = data;						
						if(archiveData.result.url != null && archiveData.result.metadataURL != null && archiveData.result.format && 
							archiveData.result.archiveHandle != null){
							if( archiveData.result.format=="text/x-eaf+xml")
								currentState = "EAF";            		
							else
								currentState = "archiveObject";							
							archive_metadata.text = archiveData.result.metadataURL;
							archive_metadata.addEventListener(MouseEvent.CLICK, openLink); 
							archive_mimeType.text = archiveData.result.format;
							archive_url.text = archiveData.result.url;
							archive_url.addEventListener( MouseEvent.CLICK, openLink);
							archiveTab.removeChild( archiveCanvas);
							nodeId = archiveData.result.archiveHandle;
							if( nodeId != null)
								okBtn.enabled=true;
							} else{
								getResource.enabled = true;
								YesNo.alert("There was a problem trying to determine the resource metadata. Please try again later!");
							}
					}
				);
			}
			
			private function openLink( event:MouseEvent):void{
				var target:Text = (event.currentTarget as Text);
				ExternalInterface.call( "window.open", target.text);
			}
			
			private function getEAFStartTime():int{
				var milliSecs:int = this.startTime.milliSecond;
				milliSecs += this.startTime.second*1000;
				milliSecs += this.startTime.minute*60*1000;
				milliSecs += this.startTime.hour*3600*1000;
				return milliSecs;
				
			}
			private function getEAFEndTime():int{
				var milliSecs:int = this.endTime.milliSecond;
				milliSecs += this.endTime.second*1000;
				milliSecs += this.endTime.minute*60*1000;
				milliSecs += this.endTime.hour*3600*1000;
				return milliSecs;
				
			}
			private function doSubmit():void{
				var archive:String = null;
				var resourceId:String = null;
				var fragmentIdentifier:String = null;
				var url:String = null;
				if( this.archiveData != null){
					archive = "MPI";
					resourceId = this.archiveData.result.archiveHandle;
					url = this.archiveData.result.url;
					if( this.archiveData.result.format=="text/x-eaf+xml"){
						var startTime:int = this.getEAFStartTime();
						var endTime:int = this.getEAFEndTime();
						fragmentIdentifier = "view=timeline&time="+startTime+"&duration="+ (endTime-startTime);
					}
						
				}
				else if( this.resourceFileStagingID != null){
					archive="local";
					resourceId = this.resourceFileStagingID;
				}
				else{
					YesNo.alert("We have encountered an unknown problem here and are unable to process your request");
					return;
				}
				var event:ImportCompleteEvent = new ImportCompleteEvent("complete", resourceId, archive, fragmentIdentifier, url, this.source);
				dispatchEvent(event);
				PopUpManager.removePopUp(this)
			}

			/*
			 * Trim value in TextInput field
			 */
			private function trimStr(evt:FocusEvent):void {
                var ti:TextInput = TextInput(evt.currentTarget);
                ti.text = StringUtil.trim(ti.text);
            }
            
        ]]>
    </mx:Script>
 
	<mx:states>
   
        <mx:State name="archiveObject" basedOn="">


            <mx:AddChild 
                relativeTo="{archiveTab}" 
                position="firstChild" 
                creationPolicy="all"
            >
            	<mx:Panel title="Information:" width="100%" height="100%" paddingBottom="10" paddingLeft="10" paddingTop="10" paddingRight="10">
	            	
	            		<mx:Grid width="100%" height="100%" horizontalAlign="center">
	            			<mx:GridRow width="100%">
	            				<mx:GridItem>
	            					<mx:Label text="Mimetype: "/>
	            				</mx:GridItem>
	            				<mx:GridItem>
	            					<mx:Text id="archive_mimeType" />
	            				</mx:GridItem>
	            			</mx:GridRow>
	            			<mx:GridRow width="100%">
	            				<mx:GridItem>
	            					<mx:Label text="metadata: "/>
	            				</mx:GridItem>
	            				<mx:GridItem>
	            					<mx:Text id="archive_metadata" buttonMode="true" useHandCursor="true"/>
	            				</mx:GridItem>
	            			</mx:GridRow>
	            			<mx:GridRow width="100%">
	            				<mx:GridItem>
	            					<mx:Label text="url: "/>
	            				</mx:GridItem>
	            				<mx:GridItem>
	            					<mx:Text id="archive_url" buttonMode="true" useHandCursor="true"/>
	            				</mx:GridItem>
	            			</mx:GridRow>
	            		</mx:Grid>
									
            	</mx:Panel>
				
            </mx:AddChild>
            <mx:SetProperty target="{this.localResourceTab}" name="enabled" value="false"/>
            
            
        </mx:State>
        <mx:State name="EAF" basedOn="archiveObject">


            <mx:AddChild 
                relativeTo="{archiveTab}" 
                position="lastChild" 
                creationPolicy="all">
            <mx:Panel width="100%" height="100%" title="Start and end time:		 (hh:mm:ss:mmm)" paddingBottom="10" paddingLeft="10" paddingTop="10" paddingRight="10">
            	<mx:HBox width="100%">
            		<mx:Label text="Starttime"/><TimeComponent id="startTime" showMilliSeconds="true" showSeconds="true" is24Hour="true"
            			backgroundColor="#000000" backgroundAlpha="0.05"
                          borderColor="#00FF00" borderStyle="solid" cornerRadius="5"/>
                    <mx:Label text="Endtime"/><TimeComponent id="endTime" showMilliSeconds="true" showSeconds="true" is24Hour="true"
            			backgroundColor="#000000" backgroundAlpha="0.05"
                          borderColor="#00FF00" borderStyle="solid" cornerRadius="5"/>
            		
            	</mx:HBox>
            </mx:Panel>
            </mx:AddChild>
           </mx:State>
          <mx:State name="localResource" basedOn="">


            <mx:AddChild 
                relativeTo="{localResourceTab}" 
                position="firstChild" 
                creationPolicy="all"
            >
            	<mx:Canvas width="100%" height="100%">
	            	
	            		<mx:Grid width="100%" height="100%" horizontalAlign="center" paddingLeft="50" paddingTop="20">
	            			<mx:GridRow width="100%">
	            				<mx:GridItem>
	            					<mx:Label text="Mimetype: "/>
	            				</mx:GridItem>
	            				<mx:GridItem>
	            					<mx:Text id="mimeType" />
	            				</mx:GridItem>
	            			</mx:GridRow>
	            			<mx:GridRow width="100%">
	            				<mx:GridItem>
	            					<mx:Label text="File name: "/>
	            				</mx:GridItem>
	            				<mx:GridItem>
	            					<mx:Text id="fileName" />
	            				</mx:GridItem>
	            			</mx:GridRow>
	            		</mx:Grid>
									
            	</mx:Canvas>
				
            </mx:AddChild>
            <mx:SetProperty target="{this.archiveTab}" name="enabled" value="false"/>
            <mx:SetProperty target="{this.importBtn}" name="visible" value="false"/>
            <mx:SetProperty target="{this.okBtn}" name="enabled" value="true"/>
            
        </mx:State>
    </mx:states>
    <mx:Canvas width="100%" height="100%">
    	<mx:TabNavigator id="tabNav" width="100%" height="100%" creationPolicy="all" >
    		<mx:VBox id="localResourceTab" label="Local resource" width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
    			<mx:Button id="importBtn" label="Select resource" click="importResource()"/>
    		</mx:VBox>
    		<mx:VBox id="archiveTab" label="Archive" width="100%" height="100%">
	    		<mx:VBox id="archiveCanvas" width="100%" height="100%">
		    		<mx:Label width="100%" text="Please specify the persistent identifier here"/>
		    		<mx:Label width="100%" text="Archive: MPI"/>
		    		<mx:HBox width="100%" height="100%">
		    			<mx:Label text="Archive id: "/>
		    			<mx:TextInput id="archiveHandle" focusOut="trimStr(event)"/>
		    			<mx:Label text=" (e.g. MPI600399#)"/>
		    		</mx:HBox>
	    			<mx:Button id="getResource" label="Get resource" click="getArchiveObject()"/>
	    		</mx:VBox>
    			
    		</mx:VBox>
    	</mx:TabNavigator>

     	
    </mx:Canvas>
	
    <mx:ControlBar horizontalAlign="center" width="100%">
        <mx:Button id="okBtn" label="Ok" click="doSubmit();"  keyUp="onKeyUpOk(event)" enabled="false"/>
        <mx:Button id="cancelBtn" label="Cancel" click="PopUpManager.removePopUp(this);"  keyUp="onKeyUpCancel(event)" enabled="true"/>
    </mx:ControlBar>
	
</mx:TitleWindow>
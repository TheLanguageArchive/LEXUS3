<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="*"
    title="Import Toolbox file"
    showCloseButton="true"
    creationComplete="init()"
    close="removeMe();"  width="800" height="100%" y="50">

	<mx:Metadata>
        [Event(name="new", type="nl.mpi.lexus.event.NewLexiconEvent")]
    </mx:Metadata>
    

    <mx:Script>
        <![CDATA[
			import com.adobe.serialization.json.JSON;
			
			import mx.collections.ArrayCollection;
			import mx.core.Application;
			import mx.core.FlexGlobals;
			import mx.core.IUIComponent;
			import mx.events.DragEvent;
			import mx.managers.DragManager;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			import nl.mpi.lexus.LexusUtil;
			import nl.mpi.lexus.YesNo;
			import nl.mpi.lexus.event.NewLexiconEvent;
			import nl.mpi.lexus.service.LexusService;
      		
        	private var typeFilefilter:Array;
        	private var typeFileRef:FileReference = new FileReference();
        	private var dataFilefilter:Array;
        	private var dataFileRef:FileReference = new FileReference();
            private var maxFileSize:int = 0; //maxFileSize of 0 indicates unlimited file size is allowed
            [Bindable] private var dataFileStagingID:String = "";
            [Bindable] private var typeFileStagingID:String = "";
            [Bindable] private var coreModelLMF:Object = null;
            [Bindable] private var markerObj:Object = null;
            private var timer:Timer;
            private var lexusService:LexusService = new LexusService();
            
			[Bindable] public var existingLexicon:Boolean;
            public var importLexiconId:String;
            public var sessionId:String;
			public var parentModule:Object;

            
			
            private function init():void {
            	this.typeFileRef.addEventListener( Event.SELECT, handleTypeFileSelect);
            	this.dataFileRef.addEventListener( Event.SELECT, handleDataFileSelect);
            	var xsdFilter:FileFilter = new FileFilter("Showbox Type Files", "*.typ");
            	this.typeFilefilter = [xsdFilter];
            	currentState= "0";
            }
             //Browse for type files
        	private function browseTypeFile(event:Event):void {
                this.typeFileRef.browse(this.typeFilefilter);
            }
             //Browse for data files
        	private function browseDataFile(event:Event):void{        
                
                this.dataFileRef.browse(this.dataFilefilter);
               
            }
            /**
            *   called after user selected files form the browse dialogue box.
            **/
            public function handleTypeFileSelect(event:Event):void {
            
	            if( !checkFileSize(typeFileRef.size))
	            	 YesNo.alert(typeFileRef.name + " is too large.\nMaximum file size is: " + Math.round(this.maxFileSize / 1024) + " kb");    
	            else{
	            	this.typeFileName_1.text = this.typeFileRef.name;
	            	this.typeFileSize_1.text = "" + this.typeFileRef.size;
	            	//this.browseTypeBTN.visible = false;
	            	
	            	var fileRef:FileReference = FileReference(event.target);
	            
	            	var uploadURLStr:String = lexusService.getAbsoluteURL("StagingFileHandler/uploadFile.json;jsessionid=" + this.sessionId);
	            	var uploadURLdata:URLRequest = new URLRequest(uploadURLStr);
					var variables:URLVariables = new URLVariables();
            		variables.requestId = this.name;
					uploadURLdata.data = variables;
				
				
					fileRef.addEventListener(Event.COMPLETE, completeHandler);
					fileRef.addEventListener(DataEvent.UPLOAD_COMPLETE_DATA,typeFileUploadCompleteDataHandler);
					fileRef.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);
           			fileRef.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
           			fileRef.addEventListener(ProgressEvent.PROGRESS, progressHandler);
           			fileRef.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
           		
					fileRef.upload(uploadURLdata, "typeFile");
	            	this.nextBTN.enabled = true;
	            	goToNext();
	            }
            }
            
            private function typeFileUploadCompleteDataHandler(event:DataEvent):void {
            	trace("resource uploadCompleteData: " + event);
            	LexusUtil.parseJSON(String(event.data),
					function(data:Object):void {
						typeFileStagingID = data.result.typeFile;
					}
				);
            }
             /**
             *    called after user selected files form the browse dialouge box.
            **/
            private function handleDataFileSelect( event:Event):void{
            
	            if( !checkFileSize(typeFileRef.size))
	            	 YesNo.alert(typeFileRef.name + " is too large.\nMaximum file size is: " + Math.round(this.maxFileSize / 1024) + " kb");    
	            else{
	            	this.dataFileName.text = this.dataFileRef.name;
	            	this.dataFileSize.text = "" + this.dataFileRef.size;
	            	this.nextBTN.enabled = true;
	            	goToNext();
	            }
            }
            
            // Checks the files do not exceed maxFileSize | if maxFileSize == 0 No File Limit Set
            // Returns true if OK, otherwise false.
	        private function checkFileSize(filesize:Number):Boolean {	      
	        	return this.maxFileSize == 0 || filesize <= this.maxFileSize;
	        }
	        
	        private function goToPrevious():void{
	        	var intState:int = parseInt( currentState);
	        	intState--;
	        	currentState = "" + intState;
	        }
	        private function goToNext():void{
	        	var intState:int = parseInt( this.currentState);
	        	intState++; 
	        	if( intState == 3 && typeFileRef.name && dataFileRef.name) {
	        		doSubmit();
	        		return;
	        	}
	        	this.prepareState(intState);
	        	currentState = "" + intState;	        	
	        }	        
	        
	        private function prepareState( state:int):void{
	        	switch( state){
	        		case 1:
//	        			nextBTN.enabled = true;
	        			break;
	        		case 2:
				        var param:Object = new Object();
				        if (importLexiconId) {
				        	param.id = importLexiconId;
				        }
	        			this.lexusService.send("LexusWorkspaceEditor/getLMFCoreModel.json", param, this.name, onJSONCoreModelLoad);

				        param = new Object();
				        param.stagingFileId = typeFileStagingID;
				        this.lexusService.send("LexusWorkspaceEditor/analyzeShoeboxLexicon.json", param, this.name, onJSONLoadMarkers);
				        
						var uploadURLdata:URLRequest = new URLRequest("StagingFileHandler/uploadFile.json;jsessionid=" + this.sessionId);
						this.dataFileRef.addEventListener(Event.COMPLETE, completeHandler);
						this.dataFileRef.addEventListener(DataEvent.UPLOAD_COMPLETE_DATA,dataUploadCompleteDataHandler);
			            this.dataFileRef.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);
			            this.dataFileRef.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
			            this.dataFileRef.addEventListener(ProgressEvent.PROGRESS, progressHandler);
			            this.dataFileRef.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
	        			this.dataFileRef.upload(uploadURLdata, "data");
	        			break;
	        	}
	        }
	        
	        private function completeHandler(event:Event):void {
            	trace("completeHandler: " + event);
            }
            
       		private function dataUploadCompleteDataHandler(event:DataEvent):void {
            	trace("data uploadCompleteData: " + event);
            	var rawData:String = String(event.data);
            	this.dataFileStagingID = (com.adobe.serialization.json.JSON.decode(rawData) as Object).result.data; //data is the field specified in the dataFileREf.upload request
       		}
       		
        	private function httpStatusHandler(event:HTTPStatusEvent):void {
            	trace("httpStatusHandler: " + event);
            }
        
        	private function ioErrorHandler(event:IOErrorEvent):void {
            	trace("ioErrorHandler: " + event);
        	}
        	
			private function progressHandler(event:ProgressEvent):void {
            	var file:FileReference = FileReference(event.target);
            	trace("progressHandler name=" + file.name + " bytesLoaded=" + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);
        	}

        	private function securityErrorHandler(event:SecurityErrorEvent):void {
         	   trace("securityErrorHandler: " + event);
        	}

            /**
			 * Loads the Lexicon tree and performs initialization
			 **/
			private function onJSONCoreModelLoad(event:ResultEvent):void
			{	
				LexusUtil.parseJSON(String(event.result),
					function(data:Object):void {  
						coreModelLMF = data.result.schema;
						tree.selectedIndex = 0;
						tree.invalidateList();
						callLater(tree.expandItem, [coreModelLMF, true]);
						callLater(tree.expandChildrenOf, [coreModelLMF, true]);
						if (markerObj != null)
							createMarkerCountFromLexicon(coreModelLMF, markerObj.dataCategories); 
					}
				);
			}
			
			/**
			 * Loads the Toolbox map into the table markerObj.
			 **/
        	private function onJSONLoadMarkers(event:ResultEvent):void{
        		LexusUtil.parseJSON(String(event.result),
					function(data:Object):void {  
						markerObj = data.result;
						if (coreModelLMF != null)
							createMarkerCountFromLexicon(coreModelLMF, markerObj.dataCategories);
					}
				);
        	}

			/**
			 * Add counts for markers that are already used.
			 **/
			private function createMarkerCountFromLexicon(tree:Object, markers:Array):void {
				updateMarkerCountFromLexicon(coreModelLMF, markers); 
				markerGrid.invalidateList();
				this.tree.invalidateList();
			}
			
			/**
			 * Recursively process the tree  and increment counts for found markers.
			 **/
			private function updateMarkerCountFromLexicon(tree:Object, markers:Array):void {
				if (tree.type == "container" && typeof(tree.children) != "undefined" && typeof(tree.DCRReference) == "undefined")
					guessMarkerForComponent(tree);
				if (tree.DCR && tree.DCR == "user defined")
					incrementUsage(tree.DCRReference, markers);
				if (typeof(tree.children) != "undefined") {
					for (var i:int = 0; i < tree.children.length ; i++) {
						updateMarkerCountFromLexicon(tree.children[i], markers);
					}
				}
			}


			/**
			 * Find a suitable marker for a group.
			 * Check if the name matches one of the data-categories names concatenated with 'Group',
			 * if so, set the DCR to the name of the data-category.
			 **/
			private function guessMarkerForComponent(group:Object):void {
				if (typeof(group.children) != "undefined") {
					for (var i:int = 0; i < group.children.length ; i++) {
						var child:Object = group.children[i];
						if (child.type == "data category" && (group.name == (child.name + 'Group'))) {
							group.DCR = child.DCR;
							group.DCRReference = child.DCRReference
						}
					}
				}
			}


			/**
			 * Increment count for marker.
			 **/
			private function incrementUsage(reference:String, markers:Array):void {
				for (var i:int = 0; i < markers.length ; i++ ) {
					if (typeof(markers[i].used) == "undefined")
						markers[i].used = 0;
					if (markers[i].marker == reference)
						markers[i].used++;
				}
			}


	        /**
			 * Handles the drag enter event for the tree
			 **/
			private function onTreeDragEnter(evt:DragEvent):void{
				var dropTarget:Tree = Tree(evt.currentTarget);
				var uiComp:IUIComponent = evt.dragInitiator;
				if (uiComp == markerGrid && evt.dragSource.hasFormat( "items")){
					DragManager.showFeedback(DragManager.MOVE);
					DragManager.acceptDragDrop(dropTarget);
				}
				else if (uiComp == tree && evt.dragSource.hasFormat( "treeItems")){
					if (tree.selectedItem.type != "marker"){
						 DragManager.showFeedback(DragManager.NONE); 
					}
					else {
						DragManager.showFeedback(DragManager.MOVE);
						DragManager.acceptDragDrop(dropTarget);
					}
				}
				else {
                  DragManager.showFeedback(DragManager.NONE);                 
                  return;     	
                }
			}
			
			/**
			 * Handles the drag over event on the tree
			 **/
			private function onTreeDragOver( evt:DragEvent):void{
				evt.preventDefault();
                evt.currentTarget.showDropFeedback(evt);

                var dropTarget:Tree = Tree(evt.currentTarget);
                var r:int = dropTarget.calculateDropIndex(evt);
                var uiComp:IUIComponent = evt.dragInitiator;
                var dropEnabled:Boolean = true;
                if (uiComp == markerGrid && evt.dragSource.hasFormat( "items")) {
                	tree.selectedIndex = r;
                	if (tree.selectedItem.type == "marker")
                		dropEnabled = false;
                }
                else if (uiComp == tree) {
                	if (tree.selectedItem.type != "marker") {
                		dropEnabled = false;
                	}
                	else{
	                	var tmpIdx:int = tree.selectedIndex;
	                	tree.selectedIndex = r;
	                	var current:Object = tree.selectedItem;
	                	tree.selectedIndex = tmpIdx;
	                	if (current.type == "marker")
	                		dropEnabled = false;
	                }
                }
               
                if (dropEnabled) {
                	DragManager.showFeedback(DragManager.MOVE);
					DragManager.acceptDragDrop(dropTarget);
					if (tree.selectedItem.children != []) { // The node has children
						if (timer != null) {
							timer.stop();
						}
						// Create a timer to expand the node and show the children after hovering for
						// about half a second over the node.
						timer = new Timer(400, 1);
		        		timer.addEventListener(flash.events.TimerEvent.TIMER,
		        			function(args:Array):Function {
			        			return function():void {
			    					timer = null;
									callLater(tree.expandItem, args);
			        			}
		        			}.call(this, [tree.selectedItem, true, true, false, null])
		    			);
		    			timer.start();
					}
                }
                else{
                	DragManager.showFeedback(DragManager.NONE);
                     return;
                }
                
			}
			/**
			 * Handles the drag drop event on the tree
			 **/
			private function onTreeDragDrop(evt:DragEvent):void{
				evt.currentTarget.hideDropFeedback(evt);
				var dropTarget:Tree =Tree(evt.currentTarget); 
				var r:int = dropTarget.calculateDropIndex(evt);
				var lmfClass:Object = this.tree.selectedItem;
				var source:IUIComponent = evt.dragInitiator;
				if (source == this.markerGrid) {
					if (existingLexicon) {
						// Adding a marker to a DC or container in an existing lexicon.
						// Set 'used'-status of (possibly) existing marker in DC to false.
						if (tree.selectedItem.DCRReferenceIndex != null) {
							 // decrement 'used' tag in previous marker
							markerGrid.dataProvider[tree.selectedItem.DCRReferenceIndex].used--;
						}
						// Add marker to DC
						tree.selectedItem.DCRReference = markerGrid.selectedItem.marker;
						// Remember index of marker (so we can update 'used'-status of marker later if it is replaced with another marker)
						tree.selectedItem.DCRReferenceIndex = markerGrid.selectedIndex;
						// Marker 'used'-status is incremented 
						markerGrid.selectedItem.used++;
						tree.invalidateList();
						markerGrid.invalidateList();
						nextBTN.enabled = true; // HHV: Just guessing here: this is always OK when loading into an existing lexicon...
					}
					else {
						var markers:ArrayCollection = new ArrayCollection(this.markerGrid.selectedItems);
						var treeMarkers:ArrayCollection = new ArrayCollection( this.tree.selectedItem.children);
						for (var i:int = 0; i < markers.length; i++) {
							var marker:Object = markers.getItemAt(i);
							treeMarkers.addItemAt(marker,0);
							var gridItems:ArrayCollection = (markerGrid.dataProvider as ArrayCollection);
							gridItems.removeItemAt( gridItems.getItemIndex( marker));
							this.tree.invalidateList();
						}
						callLater(this.tree.expandItem, [this.tree.selectedItem, true, true, false, null]);
						if (markerGrid.dataProvider.length == 0)
		                 	nextBTN.enabled = true;
					}					
				}
				else if( source == tree ){
	            	 var selItem:Object = tree.selectedItem;
	            	 
	            	 tree.selectedIndex = r;
	            	 var parent:Object = tree.getParentItem( selItem);
	            	 var children:Array = parent.children;
	            	 children.splice( children.indexOf( selItem),1);
	            	 
	            	 tree.dataDescriptor.addChildAt( tree.selectedItem, selItem, 0, null);
	            	 this.tree.invalidateList();
	            	 callLater( this.tree.expandItem, [this.tree.selectedItem, true, true, false, null]);
	            }			
			}
			
			private function doSubmit():void {
				var params:Object = new Object();
				params.typeFile = typeFileStagingID;
				params.dataFile = dataFileStagingID;
				params.lexicalEntry = coreModelLMF;
				params.lexiconId = FlexGlobals.topLevelApplication.lexiconId || '';
				params.existingLexicon = existingLexicon;
				this.lexusService.send("LexusWorkspaceEditor/importShoeboxLexicon.json", params, this.name, onSubmitResult);
				
			}
			
			private function onSubmitResult( event:ResultEvent):void{
				LexusUtil.parseJSON(String(event.result),
					function(data:Object):void {  
						var lexicon:Object = data.result.lexicon;
						var evt:Event = new NewLexiconEvent("new", lexicon);
		                dispatchEvent( evt);		               
						removeMe();
					}
				);
			}

			/* Remove this popup */
			private function removeMe():void {
				PopUpManager.removePopUp(this);
				if(this.parentModule != null && this.parentModule.rightTabNav.selectedChild != this.parentModule.lexicalEntryEditor)
					this.parentModule.iFrame.visible = true;
			}
			
			/* Return label for a treenode */
			private function treeLabel(item:Object):String
            {
				var s:String = item.name;
                if (item.DCRReference)
					s += " [" + item.DCRReference + "]"
                return s;
            }
            
        ]]>
    </mx:Script>
    
 <mx:states>
	 <mx:State name="0" basedOn="">
        <mx:AddChild 
            relativeTo="{panel}" 
            position="firstChild" 
            creationPolicy="all">	            
            	<mx:VBox width="100%" height="100%" paddingTop="10" paddingBottom="10" paddingLeft="10" paddingRight="10">
            		<mx:Text width="100%">
            			<mx:text>
	            			Each Toolbox data file is associated with a type file. This file describes the structure of the Toolbox lexicon. This structural information will be taken into account in the import process.
            			</mx:text>
            		</mx:Text> 
	            	<mx:HBox width=" 100%" height=" 100%">
	            	 	 <mx:Label text="Name: "/><mx:Label id="typeFileName_1"/>
	                	<mx:Label text="Size: "/><mx:Label id="typeFileSize_1"/>
	                	<mx:Button label="Browse for .typ type file" click="this.browseTypeFile(event)"/>
	            	</mx:HBox>
            	</mx:VBox>
        </mx:AddChild>
        
        <mx:SetProperty target="{panel}" name="title" value="Step 1. Select Toolbox type file."/>
        <mx:SetProperty target="{nextBTN}" name="enabled" value="true"/>
        
    </mx:State>
    <mx:State name="1" basedOn="">
        <mx:AddChild 
            relativeTo="{panel}" 
            position="firstChild" 
            creationPolicy="all">
            	<mx:VBox width="100%" height="100%" paddingTop="10" paddingBottom="10" paddingLeft="10" paddingRight="10">
	            	<mx:Text width="100%">
            			<mx:text>
	            			"The Toolbox data file contains the information for the lexical entries encoded using the marker fields defined in the type file."
	            		</mx:text>
            		</mx:Text>
	            	
	            	 <mx:HBox width=" 100%" height=" 100%">
	            	 	<mx:Label text="Name: "/><mx:Label id="dataFileName"/>
	                	<mx:Label text="Size: "/><mx:Label id="dataFileSize"/>
	                	<mx:Button label="Browse for .txt data file" click="this.browseDataFile(event)"/>
	            	 </mx:HBox>
	            	 
            	</mx:VBox>
            	
			
        </mx:AddChild>
        
        <mx:SetProperty target="{panel}" name="title" value="Step 2. Select Toolbox data file."/>
        <mx:SetProperty target="{nextBTN}" name="label" value="Next"/>            
        
    </mx:State>
    <mx:State name="2" basedOn="">
      <mx:AddChild 
            relativeTo="{panel}" 
            position="firstChild" 
            creationPolicy="all">
        	<mx:VBox width="100%" height="100%">
        		<mx:Text 
	            		htmlText="By dragging and dropping the markers into the appropriate LMF classes your lexicon&lt;br&gt; can be made LMF compliant"
	            />
	            <mx:HDividedBox width="100%" height="100%">
	            	<mx:Tree id="tree" width="260" height="100%" dataProvider="{this.coreModelLMF}"
								labelFunction="treeLabel" 
								dropEnabled="true" dragEnter="onTreeDragEnter(event)" dragOver="onTreeDragOver( event)" dragDrop="onTreeDragDrop(event)"
								dragEnabled="true"
								/>
					
					<mx:DataGrid id="markerGrid" top="50" width="100%" height="400" 
						dataProvider="{this.markerObj.dataCategories}" dragEnabled="true" allowMultipleSelection="{!existingLexicon}">
						<mx:columns>
							<mx:DataGridColumn headerText="Marker" dataField="marker" width="75">
								<mx:itemRenderer>
									<mx:Component>
										<mx:Label htmlText="{data.marker}" opaqueBackground="{data.used > 0 ? '0xA2FEA2' : '0xFFFFFF'}"/>
                    				</mx:Component>
								</mx:itemRenderer>
							</mx:DataGridColumn>
							<mx:DataGridColumn headerText="Name" dataField="name" width="150">
								<mx:itemRenderer>
									<mx:Component>
										<mx:Label htmlText="{data.name}"/>
									</mx:Component>
								</mx:itemRenderer>
							</mx:DataGridColumn>
							<mx:DataGridColumn headerText="Description" dataField="description" width="200">
								<mx:itemRenderer>
									<mx:Component>
										<mx:Label htmlText="{data.description}"/>
									</mx:Component>
								</mx:itemRenderer>
							</mx:DataGridColumn>
							<mx:DataGridColumn headerText="Parent" dataField="parentMarker" width="75">
								<mx:itemRenderer>
									<mx:Component>
										<mx:Label htmlText="{data.parentMarker}"/>
									</mx:Component>
								</mx:itemRenderer>
							</mx:DataGridColumn>	
						</mx:columns>
					</mx:DataGrid>
	            </mx:HDividedBox>	
			</mx:VBox>
        </mx:AddChild>
        
        <mx:SetProperty target="{panel}" name="title" value="Step 3. Select LMF class for markers."/>
        <mx:SetProperty target="{nextBTN}" name="label" value="Finish"/>            
        <mx:SetProperty target="{nextBTN}" name="enabled" value="true"/>
        
    </mx:State>
</mx:states>

<mx:Panel id="panel" title="" width="100%" height="100%">
	<mx:ControlBar>
		<mx:Button label="Previous" id="prevBTN" enabled="{currentState != '0'}" click="goToPrevious()"/>
	    <mx:Button label="Next" id="nextBTN" enabled="true" click="goToNext()"/>	                
	    <mx:Button label="Cancel" id="cancelTypeBTN" click="removeMe();"/>	        
    </mx:ControlBar>
</mx:Panel>
	           
	
</mx:TitleWindow>
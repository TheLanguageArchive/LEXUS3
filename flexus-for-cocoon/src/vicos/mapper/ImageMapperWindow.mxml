<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
                xmlns:degrafa="com.degrafa.*"
                xmlns:paint="com.degrafa.paint.*"
                xmlns:geometry="com.degrafa.geometry.*"	
                xmlns:example="com.roguedevelopment.objecthandles.example.*"
         		creationComplete="creationCompleted()"       
				click="if( event.target == this ) objectHandles.selectionManager.clearSelection();"	
	
				
				borderAlpha="0.9" borderColor="0xAAAAAA"
				width="500" height="400" showCloseButton="true" layout="absolute" 
				close="closeWindow(event)" initialize="initPopUp()">
	<mx:Script>
		<![CDATA[
			import mx.modules.Module;
			import mx.graphics.ImageSnapshot;
			import mx.core.FlexGlobals;
			import com.roguedevelopment.objecthandles.example.SimplePolygonShape;
			import com.roguedevelopment.objecthandles.example.SimpleRectangleShape;
			import com.roguedevelopment.objecthandles.example.SimpleEllipseShape;
			import com.roguedevelopment.objecthandles.example.SimpleSpriteShape;
			import com.roguedevelopment.objecthandles.example.SimpleDataModel;
			import com.roguedevelopment.objecthandles.example.SimpleFlexShape;
		
			import com.roguedevelopment.objecthandles.ObjectChangedEvent;
			import com.roguedevelopment.objecthandles.constraints.MovementConstraint;
			import com.roguedevelopment.objecthandles.constraints.SizeConstraint;
			import com.roguedevelopment.objecthandles.SpriteHandle;
			import com.roguedevelopment.objecthandles.ObjectHandles;
			
			import mx.effects.Tween;
			import mx.effects.Move;
			
			import com.degrafa.GeometryGroup;
			import com.degrafa.Surface;
			import com.degrafa.geometry.*;

			import mx.core.UIComponent;
			import flash.display.Bitmap;
			import flash.display.BitmapData;			

			import mx.managers.PopUpManager;
			import mx.events.CloseEvent;

			private static const PANEL_UPPER_BORDER:int = 30;
			private static const PANEL_LEFT_BORDER:int = 10;

			private var glowFilter:GlowFilter = new GlowFilter(0xFF0000, 0.7);

			protected var objectHandles:ObjectHandles;
			private var currentHandleObjects:Array = new Array();
			private var currentHandleObject:UIComponent;
		
			private var handleObjectIndex:int = 0;
			
		    private var polygonCommands:Vector.<int>;		
		    private var polygonCoords:Vector.<Number>;	
		
            [Bindable][Embed(source="vicos/img/resize_handle.png")]
            protected var resizeHandle:Class;			

			private var currentView:String = "edit";
			private var currentImage:String;
			
			private var degrafaRectangle:RegularRectangle;
			private var degrafaEllipse:Ellipse;
			private var degrafaPolygon:Polygon;
			private var degrafaGroup:GeometryGroup;					
			
			private var currentShapesContainer:UIComponent;
			
			private var imageMapperInnerAreaClicked:Boolean = false;
			
			private function imageLoadCompleted(evt:Event):void{
				var bmd:BitmapData = Bitmap(evt.currentTarget.content).bitmapData;
				 			
				this.width = bmd.width + 150;
				this.height = bmd.height + 60;
				
				this.visible = true;
			}
			
			private function creationCompleted():void{
				
				trace("par:", this.parent);
				
				imageBelow.load(currentImage);
				imageAbove.load(currentImage);
											
				currentShapesContainer = imageCanvas;
				
				var constraint:SizeConstraint = new SizeConstraint();
				constraint.minWidth = 20;
				constraint.maxWidth = 500;
				constraint.minHeight = 20;
				constraint.maxHeight = 200;
				
				callLater(initHandles);				
			}
			
			public function setImage(image:String):void{
				currentImage = image;
			}			
			
			private function initHandles():void{
				
				objectHandles = new ObjectHandles(FlexGlobals.topLevelApplication.mainRef);
//				objectHandles = new ObjectHandles( this.imageCanvas );
				
				var constraint:SizeConstraint = new SizeConstraint();
				constraint.minWidth = 20;
				constraint.maxWidth = 500;
				constraint.minHeight = 20;
				constraint.maxHeight = 200;				
				objectHandles.constraints.push( constraint );					
			}
			
//			[Bindable] public var currentText:String;			
			private function closeWindow(event:CloseEvent):void {
//				PopUpManager.removePopUp(this);
				this.parent.removeChild(this);
			}			
            private function initPopUp():void {
                this.isPopUp = false;
            }			
			
			private function drawDegrafaObjects():void{
				
				var data:Object = new Object();
				
				var degrafaSurface:Surface = new Surface();
				degrafaSurface.name = "degrafaSurface";
				
				var len:int = currentHandleObjects.length;
				for (var c:int = 0; c < len; c++){
					var type:String = currentHandleObjects[c].type;
					var idx:int = currentHandleObjects[c].idx;
					var degrafaGroup:GeometryGroup = new GeometryGroup();					
					degrafaGroup.graphics.beginFill(0x0000FF);
					switch (type){
						case "ellipse":
							var handleEllipse:SimpleEllipseShape = currentShapesContainer.getChildByName("handleObject" + idx) as SimpleEllipseShape;
							data = handleEllipse.getHandleObjectData();						
							degrafaEllipse = new Ellipse(0, 0, data.width, data.height);
							degrafaEllipse.draw(degrafaGroup.graphics, null);
							break;
						case "rectangle":
							var handleRectangle:SimpleRectangleShape = currentShapesContainer.getChildByName("handleObject" + idx) as SimpleRectangleShape;
							data = handleRectangle.getHandleObjectData();							
							degrafaRectangle = new RegularRectangle(0, 0, data.width, data.height);
							degrafaRectangle.draw(degrafaGroup.graphics, null);
							break;
						case "polygon":
							var handlePolygon:SimplePolygonShape = currentShapesContainer.getChildByName("handleObject" + idx) as SimplePolygonShape;
							data = handlePolygon.getHandleObjectData();						
							degrafaPolygon = new Polygon();

							var str:String = "";
							var coordsNum:int = data.coords.length;
							
							// construct polygon string
							var s:int;
							for (s = 0; s < coordsNum - 1; s++){
								str += (s % 2 == 0) ? data.coords[s] + "," : data.coords[s] + " ";  
							}
							str += data.coords[s];
							
							degrafaPolygon.data = str; 
							degrafaPolygon.draw(degrafaGroup.graphics, null);
							break;
					}
					degrafaGroup.graphics.endFill();
					
//					degrafaGroup.x = data.xPos - currentShapesContainer.x;
//					degrafaGroup.y = data.yPos - currentShapesContainer.y;				
					degrafaGroup.x = data.xPos;
					degrafaGroup.y = data.yPos;
					degrafaGroup.rotation = data.rotation;
					
					degrafaSurface.addChild(degrafaGroup);
				}

				currentShapesContainer.addChild(degrafaSurface);
				imageAbove.mask = degrafaSurface;					
								
			}
			
			private function canvasDoubleClick(evt:MouseEvent):void{
				currentShapesContainer.removeEventListener(MouseEvent.MOUSE_UP, canvasMouseUp);
				currentShapesContainer.removeEventListener(MouseEvent.MOUSE_UP, canvasDoubleClick);
				
				// at least three corners
				if (polygonCommands.length >= 3){
//					trace("PC:", polygonCoords);
					var len:int = currentShapesContainer.numChildren;
					for (var c:int = len - 1; c >= 0; c--){
						var comp:UIComponent = currentShapesContainer.getChildAt(c) as UIComponent;
						if (comp.name == "point"){
							comp.removeEventListener(MouseEvent.MOUSE_UP, canvasDoubleClick);
							comp.removeEventListener(MouseEvent.DOUBLE_CLICK, canvasDoubleClick);
							currentShapesContainer.removeChild(comp);							
						}
					}
					createHandleObject("polygon");
				}		
				polygonBtn.filters = [];		
			}
			
			private function canvasMouseUp(evt:MouseEvent):void{
				trace("mouse up:", evt.target, evt.currentTarget, currentShapesContainer.mouseX, currentShapesContainer.mouseY);

				var target:UIComponent = evt.target as UIComponent;
				var currentTarget:UIComponent = evt.currentTarget as UIComponent;
				
				if (currentTarget == currentShapesContainer){
					if (polygonCommands.length > 0){
						// lineTo action
						polygonCommands.push(2);
					}
					else{
						// moveTo action
						polygonCommands.push(1);
					}
					
					trace("coords:", currentShapesContainer.mouseX, currentShapesContainer.mouseY);
					
					polygonCoords.push(currentShapesContainer.mouseX, currentShapesContainer.mouseY);
//					polygonCoords.push(	currentShapesContainer.mouseX + PANEL_LEFT_BORDER, 
//										currentShapesContainer.mouseY + PANEL_UPPER_BORDER);
					
					var drawPoint:UIComponent = new UIComponent();
					drawPoint.name = "point";
					drawPoint.graphics.beginFill(0xFF0000);
					drawPoint.graphics.drawCircle(currentShapesContainer.mouseX, currentShapesContainer.mouseY, 2);
					drawPoint.graphics.endFill();
					drawPoint.addEventListener(MouseEvent.MOUSE_UP, canvasDoubleClick);
					drawPoint.addEventListener(MouseEvent.DOUBLE_CLICK, canvasDoubleClick);
					currentShapesContainer.addChild(drawPoint);				
				}
			}							
			
			public function hideHandleObjects():void{
				objectHandles.selectionManager.clearSelection();
			}
			
			private function showHandleObjects(visible:Boolean):void{
				var len:int = currentHandleObjects.length;
				for (var c:int = 0; c < len; c++){
					currentShapesContainer.getChildByName("handleObject" + currentHandleObjects[c].idx).visible = visible;
				}
			}
			
			private function handleObjectClicked(evt:MouseEvent):void{
//				trace("clicked:", evt.target);
				currentHandleObject = evt.target as UIComponent;
			}
			
			private function deleteHandleObject(evt:MouseEvent):void{
//				if (currentHandleObject != null){
				if (objectHandles.selectionManager.currentlySelected.length > 0){	
					currentHandleObject.removeEventListener(MouseEvent.CLICK, handleObjectClicked);
					objectHandles.unregisterComponent(currentHandleObject);
					objectHandles.selectionManager.clearSelection();
					
					var len:int = currentHandleObjects.length;
					for (var i:int = 0; i < len; i++){
						if (currentHandleObject == currentHandleObjects[i].ref){
							currentHandleObjects.splice(i, 1);
							break;
						}
					}
					currentShapesContainer.removeChild(currentHandleObject);
					currentHandleObject = null;
				}
			}
			
			private function switchViews(evt:MouseEvent):void{
				if (switchViewBtn.label == "edit"){
					imageAbove.mask = null;
					currentShapesContainer.removeChild(currentShapesContainer.getChildByName("degrafaSurface"));
					showHandleObjects(true);
					switchViewBtn.label = "display";
				}
				else{
					drawDegrafaObjects();
					objectHandles.selectionManager.clearSelection();
					showHandleObjects(false);	
					switchViewBtn.label = "edit";
				}
			}
			
			private function createHandleObject(type:String):void{
				
				var flexModel:SimpleDataModel = new SimpleDataModel();
				
				switch (type){
					case "ellipse":
						flexModel = new SimpleDataModel();
						flexModel.x = 100;
						flexModel.y = 200;
						flexModel.width = 100;
						flexModel.height = 50;
						
						var handleEllipse:SimpleEllipseShape = new SimpleEllipseShape();
						handleEllipse.name = "handleObject" + handleObjectIndex;
						handleEllipse.model = flexModel; 
						
						currentShapesContainer.addChild(handleEllipse);					
						currentHandleObjects.push({idx:handleObjectIndex, type:"ellipse", ref:handleEllipse});
						
						handleEllipse.addEventListener(MouseEvent.CLICK, handleObjectClicked);
						objectHandles.registerComponent( flexModel, currentShapesContainer.getChildByName("handleObject" + handleObjectIndex));
						
						break;
						
					case "rectangle":
						flexModel = new SimpleDataModel();
						flexModel.x = 50;
						flexModel.y = 50;
						flexModel.width = 100;
						flexModel.height = 50;
						
						var handleRectangle:SimpleRectangleShape = new SimpleRectangleShape();
						handleRectangle.name = "handleObject" + handleObjectIndex;
						handleRectangle.model = flexModel; 
						
						currentShapesContainer.addChild(handleRectangle);					
						currentHandleObjects.push({idx:handleObjectIndex, type:"rectangle", ref:handleRectangle});

						handleRectangle.addEventListener(MouseEvent.CLICK, handleObjectClicked);
						objectHandles.registerComponent( flexModel, currentShapesContainer.getChildByName("handleObject" + handleObjectIndex));
						
						break;		
					case "polygon":
						
//					    polygonCommands = new Vector.<int>();
//					    polygonCommands[0] = 1;
//					    polygonCommands[1] = 2;

//					    polygonCoords = new Vector.<Number>();
//					    polygonCoords[0] = 20; //x
//					    polygonCoords[1] = 20; //y 
//					    polygonCoords[2] = 40; 
//					    polygonCoords[3] = 10; 

						// complete polygon if yet incomplete
						if (polygonCoords[0] != polygonCoords[polygonCoords.length - 2] &&
							polygonCoords[1] != polygonCoords[polygonCoords.length - 1]){
							polygonCommands.push(2);
							polygonCoords.push(polygonCoords[0], polygonCoords[1]);		
						}
						
						var minX:Number = 100000;
						var maxX:Number = 0;
						var minY:Number = 100000;
						var maxY:Number = 0;
						
						var len:int = polygonCoords.length;
						for (var c:int = 0; c < len; c++){
							// x
							if (c % 2 == 0){
								minX = Math.min(minX, polygonCoords[c]);
								maxX = Math.max(maxX, polygonCoords[c]);
							}
							// y
							else{
								minY = Math.min(minY, polygonCoords[c]);
								maxY = Math.max(maxY, polygonCoords[c]);								
							}
						}
						
						// adjust x and y values to move top-left corner of polygon to 0,0
						for (c = 0; c < len; c++){
							// x
							if (c % 2 == 0){
								polygonCoords[c] -= minX;
							}
							// y
							else{
								polygonCoords[c] -= minY;								
							}
						}						
						
						var handlePolygon:SimplePolygonShape = new SimplePolygonShape(polygonCommands, polygonCoords);
						handlePolygon.name = "handleObject" + handleObjectIndex;
						
						flexModel = new SimpleDataModel();
						flexModel.x = minX;
						flexModel.y = minY;
						flexModel.width = maxX - minX;
						flexModel.height = maxY - minY;						
						
						handlePolygon.model = flexModel; 
						
						currentShapesContainer.addChild(handlePolygon);					
						currentHandleObjects.push({idx:handleObjectIndex, type:"polygon", ref:handleRectangle});

						handlePolygon.addEventListener(MouseEvent.CLICK, handleObjectClicked);
						objectHandles.registerComponent( flexModel, currentShapesContainer.getChildByName("handleObject" + handleObjectIndex));					
										
						break;				
				}
				handleObjectIndex++;
			}			
			
			private function createRectangle(evt:MouseEvent):void{
				createHandleObject("rectangle");	
			}
			
			private function createEllipse(evt:MouseEvent):void{
				createHandleObject("ellipse");	
			}			
			
			private function createPolygon(evt:MouseEvent):void{
				
				var btn:Button = evt.target as Button;
				
				// button was unselected
				if (btn.filters.length == 0){
					btn.filters = [glowFilter];
					
					polygonCommands = new Vector.<int>();
					polygonCoords = new Vector.<Number>();
					
					currentShapesContainer.addEventListener(MouseEvent.MOUSE_UP, canvasMouseUp);
					currentShapesContainer.addEventListener(MouseEvent.DOUBLE_CLICK, canvasDoubleClick);
				}
				
				// button was selected
				else{
					btn.filters = [];
					
					currentShapesContainer.removeEventListener(MouseEvent.MOUSE_UP, canvasMouseUp);
					currentShapesContainer.removeEventListener(MouseEvent.DOUBLE_CLICK, canvasDoubleClick);					
				}
			}			
			
			public function imageMapperMouseDown(evt:MouseEvent):void{
				var module:Module = this.parent as Module;
				Module(this.parent)["imageMapperMouseDown"](evt);
			}			
				
		]]>
	</mx:Script>
	
	<!-- mouseDown="imageMapperMouseDown(event)" -->
	<mx:Canvas id="innerArea" x="0"	y="0" width="100%" height="100%"
		mouseDown="imageMapperMouseDown(event)">
		<mx:Canvas id="imageCanvas" doubleClickEnabled="true" x="10" y="10" >
			<mx:Image id="imageBelow" complete="imageLoadCompleted(event)" alpha="0.2"/>
			<mx:Image id="imageAbove"  />
		</mx:Canvas>
		<mx:Button x="340" y="10" label="Rectangle" id="rectangleBtn" width="100" click="createRectangle(event)"/>
		<mx:Button x="340" y="40" label="Ellipse" id="ellipseBtn" width="100" click="createEllipse(event)"/>
		<mx:Button x="340" y="70" label="Polygon" id="polygonBtn" 
			width="100" click="createPolygon(event)"
			toolTip="Single click to set a polygon corner. Double click to end polygon creation."/>
		<mx:Button x="340" y="228" label="display" width="100" id="switchViewBtn" click="switchViews(event)"/>
		<mx:Button x="340" y="185" label="delete" width="100" id="deleteBtn" click="deleteHandleObject(event)"/>
		
	</mx:Canvas>
	
</mx:TitleWindow>

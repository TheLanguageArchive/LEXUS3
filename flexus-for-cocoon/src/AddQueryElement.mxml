<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="*"
				title="{texts_code=='query' ? 'Query' : 'Filter'} builder"
				showCloseButton="true"
				close="PopUpManager.removePopUp(this);"  width="500" height="400" xmlns:com="com.*">
	
	<mx:Metadata>
		[Event(name="update", type="nl.mpi.lexus.event.QueryElementChangeEvent")]
	</mx:Metadata>
	
	
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.ListEvent;
			import mx.events.ValidationResultEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			import nl.mpi.lexus.LexusUtil;
			import nl.mpi.lexus.YesNo;
			import nl.mpi.lexus.event.QueryElementChangeEvent;
			import nl.mpi.lexus.service.LexusService;
			
			[Bindable][Embed(source="../assets/images/iconza_24x24/warning_24x24.png")] private var warnIcon:Class;
			
			/* Define a variable to be able to change the texts. Later, when we grow up we might have i18n, then a single var will be handy. */
			[Bindable] public var texts_code:String;
			
			[Bindable] private var lexica:Object = null;
			private var _lexicon:Object;
			private var _availableLexica:Object;
			private var _queryEditor:QueryEditor;
			private var _queries:ArrayCollection;
			public var currentLexiconId:String = "";
			
			[Bindable] private var dataCategories:Object = null;
			
			public var beginsWithIconClass:Class = FlexGlobals.topLevelApplication.beginsWithIconClass;
			public var endsWithIconClass:Class = FlexGlobals.topLevelApplication.endsWithIconClass;
			public var isIconClass:Class = FlexGlobals.topLevelApplication.isIconClass;
			public var containsIconClass:Class = FlexGlobals.topLevelApplication.containsIconClass;
			
			[Bindable] public var conditionItems:Object = [
				{
					"icon": "isIconClass",
					"condition": "is",
					"label": "is"
				},
				{
					"icon": "containsIconClass",
					"condition": "contains",
					"label": "contains"
				},
				{
					"icon": "beginsWithIconClass",
					"condition": "begins with",
					"label": "begins with"
				},
				{
					"icon": "endsWithIconClass",
					"condition": "ends with",
					"label": "ends with"
				}
			];
			
			[Bindable] private var _queryElement:Object;
			
			[Bindable] private var _state:int = STATE_MODIFY;
			static public var STATE_ADD : int = 0;
			static public var STATE_MODIFY: int= 1;
			static public var FORWARD: int= 0;
			static public var BACKWARD: int= 1;
			
			[Bindable] private var _direction:int = FORWARD;
			
			private var lexusService:LexusService = new LexusService();
			
			public function get queries():ArrayCollection
			{
				return _queries;
			}
			
			public function set queries(value:ArrayCollection):void
			{
				_queries = value;
			}
			
			public function set lexicon(lexicon:Object):void {
				_lexicon = lexicon;
				var arrColl:ArrayCollection = new ArrayCollection();
				arrColl.addItem(lexicon);
				this.lexica = arrColl;
			}
			
			public function set availableLexica(availableLexica:Object): void {
				this._availableLexica = availableLexica;
			}
			public function set queryEditor(queryEditor:QueryEditor): void {
				this._queryEditor = queryEditor;
			}
			
			
			public function set queryElement( obj:Object):void{
				this._queryElement = obj;
				init();			
			}
			public function get queryElement(): Object {
				return _queryElement;
			}
			public function set modificationState( state:int):void{
				if( state == STATE_ADD || state == STATE_MODIFY)
					_state = state;
				init();
			}
			
			public function set direction( direction:int):void{
				if( direction == FORWARD || direction == BACKWARD)
					_direction = direction;
				//init();
			}
			
			/**
			 * Event Handler for the onLoad event for loading data categories. This will load the JSON object and perform initial initialization
			 * */
			private function onJSONLoadDataCategories(event:ResultEvent):void
			{
				LexusUtil.parseJSON(String(event.result),
					function(data:Object):void {
						dataCategories = data.result.dataCategories;
						callLater(setInitialDataCategory);
						_queryEditor.setDataCategories(currentLexiconId, dataCategories);
						detailsCanvas.enabled = true;
					}
				);
			}
			
			/**
			 * Initialization method. This method is called in set XXX property 
			 * methods and are called to prepare this component.
			 **/
			private function init():void{
				var cType:String = this.getCreationSubType();
				
				currentState = cType;
				this.prepareState( cType);
				
				
			}
			
			/**
			 * Prepares all necessay operations for the specified state
			 **/ 
			private function prepareState(state:String):void {
				switch( state){
					case "query":
						break;
					case "lexicon":
						if (texts_code == "filter"){
							updateQueryElement();
							break;
						}
						if( this.lexica == null)
							this.lexica = this._availableLexica;
						this.detailsCanvas.enabled = true;
						callLater(setInitialLexicon);
						//this.lexiconService.send();
						break;
					case "data category":
						var cachedDCs:Object = _queryEditor.getDataCategories(currentLexiconId);
						if (cachedDCs) {
							dataCategories = cachedDCs;
							callLater(setInitialDataCategory);
						}
						else {
							this.detailsCanvas.enabled = false;
							var params:Object = new Object();
							params.id = currentLexiconId;
							this.lexusService.send("QueryBuilder/getDataCategories.json", params, "QueryBuilder", this.onJSONLoadDataCategories);
						}            			
						callLater(setInitialCondition);
						break;
				}
			}
			
			
			
			/**
			 * Performs the update process on the current queryElement. 
			 * This may either be a modification or adding of a new schema element.
			 **/ 
			private function updateQueryElement():void{
				var element:Object;
				var coll:ArrayCollection;
				
				okBtn.enabled = false;
				cancelBtn.enabled = false;
				switch( this._state){
					case STATE_ADD:
						element = new Object();
						element.id=null;
						break;
					case STATE_MODIFY:
						element = _queryElement;
						break;
				}
				
				
				switch (currentState) {
					case "query":
						element.name = q_name.text;
						element.description = q_description.text;
						element.type="query";
						break;
					case "lexicon":
						var lex:Object;
						if (l_nameList != null)
							lex = l_nameList.selectedItem;
						else
							lex = this._lexicon;
						element.id = lex.id;
						element.type="lexicon";
						if (_state == STATE_ADD) {
							element.children = new Array();
							coll = new ArrayCollection(_queryElement.children); // Add it to parent.
							coll.addItem( element);
						}
						
						break;
					case "data category":
						var dc:Object = dc_nameList.selectedItem;
						element.id = dc.id;
						element.name = dc.name;
						element.negation = dc_negation.selected;
						element.condition = dc_condition.selectedItem.condition;
						element.value = dc_value.text;
						element.caseSensitive = caseSensitiveCheckbox.selected;
						element.type="data category";
						
						if (_state == STATE_ADD) {
							if (!_queryElement.hasOwnProperty("children")){
								_queryElement.children = [];
							}
							coll = new ArrayCollection(_queryElement.children); // Add it to parent.
							coll.addItem( element);
						}
						break;
					
				}
				var event:Event = new QueryElementChangeEvent("update", element, this._state, this._direction);
				dispatchEvent(event);
				PopUpManager.removePopUp(this);
			}
			
			/**
			 * handles the cancelation of any update process on the current queryElement. 
			 * 
			 **/ 
			
			private function cancelNewQueryElement():void{
				var element:Object;
				var coll:ArrayCollection;
				var parent:Object = this._queryEditor.queryTree.selectedItem;
				okBtn.enabled = false;
				cancelBtn.enabled = false;
				
				
				switch (currentState) {
					case "query":
						if (this._state == STATE_MODIFY && this._queryEditor.newQuery)
							this._queryEditor.cleanUnsavedData();
						break;
					case "lexicon":
						if (this._queryEditor.newQuery)
							this._queryEditor.cleanUnsavedData();
								
						else if (this._state == STATE_MODIFY && this._queryEditor.newElement)
						{	//added for the case that switching between query/lexicon/datacaegroy has happened using prev/next button and the parent is no longer the selectedItem.
							if	(parent == queryElement && queryElement.type != "query"){
								parent = this._queryEditor.queryTree.getParentItem(queryElement);
							}
							
							var lchildren: Array = parent.children;
							lchildren.splice(lchildren.indexOf(queryElement), 1);
							this._queryEditor.queryTree.selectedIndex = 0;
							this._queryEditor.queryTree.invalidateDisplayList();
							this._queryEditor.queryTree.invalidateList();
						}
						
						break;
					
					case "data category":
						if ((this._queryEditor.newElement || this._queryEditor.newQuery) && this._queryEditor.updateInitiatedAt != "lexicon")
							
						{	// when the actual parent is "lexicon" and grandparent is "query" but previous has been clicked on during the query formation, and we are coming from a modicication state so parent is no longer the selectedItem.
							if (parent == queryElement && parent.type =="data category" && this._queryEditor.updateInitiatedAt != "data category")
								parent = this._queryEditor.queryTree.getParentItem(parent);
							
							if ((parent.hasOwnProperty("children") && parent.children.length <= 1) && parent.type == "lexicon" )
							{	// when parent is "lexicon" and grandparent is "query" and previouse has not been clicked on during the query formation.
								var grandParent:Object = this._queryEditor.queryTree.getParentItem(parent);
								var children: Array = grandParent.children;
								if (children.length == 1 && this._queryEditor.newQuery)
									this._queryEditor.cleanUnsavedData();
								else
								{
									children.splice(children.indexOf(parent), 1);
									this._queryEditor.queryTree.selectedIndex = 0;
									this._queryEditor.queryTree.invalidateDisplayList();
									this._queryEditor.queryTree.invalidateList();
								}
								
							}
						}
						
						break;
				}
			}
			
			// Event listener for the valid and invalid events.
			private function handleValid(eventObj:ValidationResultEvent):void {
				if (eventObj.type==ValidationResultEvent.VALID){
					for each(var tmpQr:Object in _queries){
						if (tmpQr.name == q_name.text && tmpQr.id != _queryEditor.query.id){
							warnIco.visible = true;
							okBtn.enabled = false;
							okBtn.toolTip = "A " + (texts_code == "query" ? "query" : "filter") + " with the name \"" + q_name.text 
								+ "\" already exists!\nPlease choose a different name for this " + (texts_code == "query" ? "query" : "filter") + ".";
							return;
						}
					}
					warnIco.visible = false;
					okBtn.toolTip = "";
					okBtn.enabled = true;
				}
				else{
					warnIco.visible = true;
					okBtn.enabled = false;
					okBtn.toolTip = "The " + (texts_code == "query" ? "query" : "filter") + " name cannot be empty.";
					warnIco.toolTip = "The " + (texts_code == "query" ? "query" : "filter") + " name cannot be empty.";
				}
			}
			
			
			/**
			 * Handler for the change event of the lexicon combobox
			 **/ 
			private function onLexiconChange( event:ListEvent):void{
				var lexItem:Object = l_nameList.selectedItem;
				if( _queryElement.type == "lexicon" && lexItem.id != _queryElement.id){
					YesNo.confirmSave("Are you sure you want to change this lexicon?\nAll your search terms for your original lexicon will be removed.", confirmLexiconChangeHandler);
				}
				else{
					switchLexica();
				}
				
				
			}
			/**
			 * Handles the user decission event that is required after a user decides to change the lexicon
			 **/ 
			private function confirmLexiconChangeHandler(event:CloseEvent):void{
				if (event.detail == Alert.YES) {
					_queryEditor.confirmDeleteHandler(event);
					switchLexica();
					this._queryElement = this._queryEditor.queryTree.dataProvider[0];
					this._queryEditor.queryTree.selectedItem = this._queryElement;
					this.modificationState = STATE_ADD;
					this.redrawOkOrNextBtn();
					// to be used for cancelation handler in case during modification of lexicon cancel is pressed. Canceling is treated the same way that a new lexicon is being added to a an existing query and then gets canceled.
					this._queryEditor.newElement = true;
				//	this._queryEditor.newQuery = false;
					this._queryEditor.updateInitiatedAt = this._queryEditor.queryTree.selectedItem.type;
				} 
				else
					setInitialLexicon();
			}
			/**
			 * Changes the lexicon
			 */
			private function switchLexica():void{
				var lexItem:Object = l_nameList.selectedItem;
				l_description.text = lexItem.description;
			}
			/**
			 * Sets the initially selected lexicon in the lexicon combobox
			 **/
			private function setInitialLexicon():void{
				if( this._queryElement.type == "lexicon"){
					//The current element is a lexicon..We will set the
					var lexId:String = this._queryElement.id;
					if( l_nameList != null){
						var lexs:ArrayCollection = (l_nameList.dataProvider as ArrayCollection);
						for( var i:int = 0; i < lexs.length; i++){
							var lexItem:Object = lexs.getItemAt( i);
							if( lexItem.id == lexId){
								l_nameList.selectedItem = lexItem;
								l_description.text = lexItem.description;
								break;
							}
						}
					}
				}
				else if((l_nameList.dataProvider as ArrayCollection).length >0 ){
					l_description.text = l_nameList.selectedItem.description;
					
				}
			}
			/**
			 * Sets the initially selected data category from in the data category combobox
			 */
			private function setInitialDataCategory():void{
				if( this._queryElement.type == "data category" && this._state==STATE_MODIFY && this._direction == FORWARD){
					var dc_id:String = this._queryElement.id;
					var dcs:ArrayCollection = (dc_nameList.dataProvider as ArrayCollection);
					for( var i:int = 0; i < dcs.length; i++){
						var dcItem:Object = dcs.getItemAt(i);
						if (dcItem.id == dc_id) {
							dc_nameList.selectedIndex = i;
							break;
						}
					}
				}
				else if( (dc_nameList.dataProvider as ArrayCollection).length > 0){
					dc_nameList.selectedIndex = 0;
				}
				
			}
			private function setInitialCondition():void{
				if( this._queryElement.type == "data category" && this._direction == FORWARD)
					if (this._state==STATE_MODIFY){
						var condition:Object = this._queryElement.condition;
						var conditions:ArrayCollection = (dc_condition.dataProvider as ArrayCollection);
						for( var i:int = 0; i < conditions.length; i++){
							var condItem:Object = conditions.getItemAt( i);
							if( condItem.condition == condition){
								dc_condition.selectedIndex = i;
								break;
							}
						}
					} // added by ssha to fix #1741 
					else
					{dc_condition.selectedIndex = 0;
						dc_negation.selected = false;
						dc_value.text = "";
						caseSensitiveCheckbox.selected = false;
						
					}
			}
			
			
			/**
			 * Handles the event when the user presses the previous button
			 **/
			private function onPreviousClicked( event:MouseEvent):void{
				
				_direction = BACKWARD;
				updateQueryElement();
			}
			
			
			/**
			 * Handles the event when the user presses the okay button
			 **/
			private function onOkClicked( event:MouseEvent):void{
				_direction = FORWARD;
				updateQueryElement();
			}
			
			/**
			 * Handles the event when the user presses the cancel button
			 **/ 
			private function onCancelClicked( event:MouseEvent):void{
				
				cancelNewQueryElement();
				PopUpManager.removePopUp(this);
			}
			
			/**
			 * Handles key press events on the okay button. When the ok button has focus and the user presses enter then the 
			 * update process is activated.
			 **/
			private function onKeyUpOk(event:KeyboardEvent):void{
				//Enter pressed
				if( event.keyCode == 13)
					this.updateQueryElement();
			}
			
			
			public function redrawPreviouseBtn():void{
				
				if ((this._state == STATE_ADD && !atInitiatingState()) || 
					(currentState =="data category" && this._queryEditor.updateInitiatedAt == "query" && !(texts_code == "filter"))|| 
					(this._state == STATE_MODIFY && this._queryElement.id !="" &&  this._queryEditor.newQuery))
				{	prevBtn.visible = true;
					prevBtn.includeInLayout = true ;}
				else
				{
					prevBtn.visible = false;
					prevBtn.includeInLayout = false ;
				}}
			
			public function atInitiatingState():Boolean{
				if (this._queryEditor.newElement) 
					if (currentState =="data category" && this._queryEditor.updateInitiatedAt =="query" && texts_code != "filter")
						return false;
					else
						return true;
					else
						return false;
			}
			
			public function redrawOkOrNextBtn():void{
				
				if ((this._state == STATE_ADD  || (this._state == STATE_MODIFY && (this._queryEditor.newQuery || this._queryEditor.newElement))) && currentState !="data category")
					okBtn.label = "Next";
				else
					okBtn.label = "Ok";
			}
			
			
			/**
			 * Returns the sub type of the current query element. It describes the 'derived' type of the current
			 * queryElement based on the _state(ADD or MODIFY) and the element's own type
			 **/
			private function getCreationSubType():String{
				if( this._queryElement == null)
					return "query";
				
				switch( this._state){
					case STATE_ADD:
						switch( this._queryElement.type){
							case "query":
								return "lexicon";
								
							case "lexicon":
								return "data category";
								
							case "data category":
								return "data category";
								
						}
						break;
					case STATE_MODIFY:
						return this._queryElement.type;
						break;
				}
				
				return null;
			}
			
		]]>
	</mx:Script>
	<mx:StringValidator id="reqValid" source="{q_name}" property="text" triggerEvent="change"
						minLength="1" valid="handleValid(event)" invalid="handleValid(event)"/>
	<mx:states>
		<mx:State name="query" basedOn="">
			<mx:AddChild
				relativeTo="{detailsCanvas}"
				position="lastChild"
				creationPolicy="all">
				<mx:Panel title="{texts_code=='query' ? 'Query' : 'Filter'}" width="100%" height="100%" horizontalAlign="left">
					<mx:Spacer height="10"/>
					<mx:Grid width="80%" horizontalAlign="center">
						<mx:GridRow>
							<mx:GridItem>
								<mx:Label text="Name"/>
							</mx:GridItem>
							<mx:GridItem>
								<mx:TextArea id="q_name" text="{_queryElement.name}"/>
							</mx:GridItem>
							<mx:GridItem verticalAlign="middle">
								<mx:Image id="warnIco" source="{warnIcon}" visible="false" 
										  toolTip="A {texts_code=='query' ? 'query' : 'filter'} with the name &quot;{q_name.text}&quot; already exists! &#xa;Please choose a different name for this {texts_code=='query' ? 'query' : 'filter'}."
										  height="16" width="16"/>	
							</mx:GridItem>
						</mx:GridRow>
						<mx:GridRow>
							<mx:GridItem>
								<mx:Label text="Description"/>
							</mx:GridItem>
							<mx:GridItem>
								<mx:TextArea id="q_description" text="{_queryElement.description}"/>
							</mx:GridItem>
						</mx:GridRow>
					</mx:Grid>			
				</mx:Panel>		
			</mx:AddChild>
		</mx:State>
		<mx:State name="lexicon" basedOn="">
			<mx:AddChild
				relativeTo="{detailsCanvas}"
				position="lastChild"
				creationPolicy="all">
				<mx:Panel title="Lexicon" width="100%" height="100%">
					<mx:VBox width="80%" horizontalAlign="center">
						<mx:Spacer height="10"/>
						<mx:ComboBox id="l_nameList" labelField="name" dataProvider="{this.lexica}" change="onLexiconChange(event)"/>
						<mx:Text id="l_description" width="80%"/>
						
					</mx:VBox>
				</mx:Panel>
			</mx:AddChild>
		</mx:State>
		<mx:State name="data category" basedOn="">
			<mx:AddChild
				relativeTo="{detailsCanvas}"
				position="lastChild"
				creationPolicy="all">
				<mx:Panel title="Data category" width="100%" height="100%" horizontalAlign="center">
					<mx:VBox width="80%" horizontalAlign="left">
						<mx:Spacer height="10"/>
						<mx:ComboBox id="dc_nameList" labelField="name" dataProvider="{this.dataCategories}"/>
						<mx:HBox>
							<com:IconComboBox id="dc_condition" dataProvider="{conditionItems}" labelField="label"   iconField="icon" x="10" y="10"/>
							<mx:CheckBox id="dc_negation" selected="{_queryElement.negation}"/>
							<mx:Label text="not"/>
						</mx:HBox>
						<mx:Spacer height="20"/>
						<mx:HBox width="100%">
							<mx:TextArea  id="dc_value" width="80%" text="{_queryElement.value}"/>
							<mx:CheckBox id="caseSensitiveCheckbox" label="aBc" selected="{_queryElement.caseSensitive}"/>
						</mx:HBox>
						
					</mx:VBox>
				</mx:Panel>
			</mx:AddChild>
		</mx:State>
	</mx:states>
	<mx:Canvas width="100%" height="100%">
		<mx:VBox width="100%" height="100%">
			<mx:Canvas id="detailsCanvas" width="100%" height="100%"/>
		</mx:VBox>
	</mx:Canvas>
	<mx:ControlBar horizontalAlign="center" width="100%">
		
		<mx:Button id="prevBtn" label="Previous" visible="false"  click="onPreviousClicked(event)"  keyUp="onKeyUpOk(event)" enabled="true"/>
		<mx:Button id="okBtn" label="Next" click="onOkClicked(event)"  keyUp="onKeyUpOk(event)" enabled="true"/>
		<mx:Button id="cancelBtn" label="Cancel" click="onCancelClicked(event)" keyUp="onKeyUpOk(event)" enabled="true"/>
	</mx:ControlBar>
</mx:TitleWindow>
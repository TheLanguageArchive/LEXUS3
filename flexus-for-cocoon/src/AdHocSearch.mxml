<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas label="Ad hoc search" width="100%" height="100%" creationComplete="init()"
		   xmlns:mx="http://www.adobe.com/2006/mxml"
		   xmlns:com="com.*">
	<mx:Script>
		<![CDATA[
			
			import mx.core.FlexGlobals;
			import mx.events.ListEvent;
			import mx.rpc.events.ResultEvent;
			
			import nl.mpi.lexus.LexusUtil;
			import nl.mpi.lexus.service.LexusService;
			
			[Bindable] private var dataCategories:Object;
			[Bindable] public var searchComponent:SearchComponent;
			
			private var lexusService:LexusService = new LexusService();
			
			public var beginsWithIconClass:Class = FlexGlobals.topLevelApplication.beginsWithIconClass;
			public var endsWithIconClass:Class = FlexGlobals.topLevelApplication.endsWithIconClass;
			public var isIconClass:Class = FlexGlobals.topLevelApplication.isIconClass;
			public var containsIconClass:Class = FlexGlobals.topLevelApplication.containsIconClass;
			[Bindable] public var conditionItems:Object = [
				{
					"icon": "isIconClass",
					"condition": "is",
					"label": "is"
				},
				{
					"icon": "containsIconClass",
					"condition": "contains",
					"label": "contains"
				},
				{
					"icon": "beginsWithIconClass",
					"condition": "begins with",
					"label": "begins with"
				},
				{
					"icon": "endsWithIconClass",
					"condition": "ends with",
					"label": "ends with"
				}
			];
			
			private function init():void {
			}
			
			private function onDataCategoryChange(event:ListEvent):void{
				controlSearchButtonState();
			}
			private function onEditChange( event: Event):void{
				controlSearchButtonState();
			}
			private function onDcConditionChange( event: Event):void{
				controlSearchButtonState();
			}
			
			private function validateSearchCriteria():Boolean {
				return this.lexicaList.selectedIndex != -1 && this.lexicaList.selectedIndex != 0 &&
					this.dcList.selectedIndex != -1 &&
					searchInput.text != null &&
					(searchInput.text.length > 0 || dc_condition.selectedItem.condition == "is" || dc_condition.selectedItem.condition == "contains");
			}
			
			private function controlSearchButtonState():void{
				if (validateSearchCriteria())
					this.searchBtn.enabled = true;
				else
					this.searchBtn.enabled  = false;
			}
			
			private function onLexiconChange(event:ListEvent):void {
				controlSearchButtonState();
				
				var param:Object = new Object();
				if( this.lexicaList.selectedItem.hasOwnProperty("id")){
					this.enabled = false;
					LexusUtil.showWait(this, "Retrieving data categories");				
					param.id = this.lexicaList.selectedItem.id;
					this.lexusService.send("QueryBuilder/getDataCategories.json", param, this.name, onJSONLoadDataCategories);
				}
				else{
					dataCategories = null;
				}
				
			}
			
			
			/**
			 * Event Handler for the onLoad event for loading data categories. This will load the JSON object and perform initial initialization
			 * */
			
			private function onJSONLoadDataCategories(event:ResultEvent):void
			{
				LexusUtil.parseJSON(String(event.result),
					function(data:Object):void {
						dataCategories = data.result.dataCategories;
						LexusUtil.removeWait();
					}
				);
				this.enabled = true;
			}
			
			private function doSearch(event:MouseEvent):void {
				var query:Object= new Object();
				query.type="query";
				
				var lexicon:Object = new Object();
				lexicon.id = this.lexicaList.selectedItem.id;
				lexicon.type="lexicon";
				query.children = new Array(lexicon);
				
				var qParam:Object = new Object();
				qParam.id = dcList.selectedItem.id;
				qParam.condition = dc_condition.selectedItem.condition;
				qParam.value = this.searchInput.text;
				qParam.negation = negationBox.selected;
				qParam.type="data category";
				qParam.caseSensitive = caseSensitiveCheckbox.selected;
				lexicon.children = new Array(qParam);
				
				searchComponent.executeAdHoc(query);
			}
		]]>
	</mx:Script>
	<mx:VBox width="100%" height="100%" horizontalAlign="left">
		<mx:HBox width="100%" height="30" horizontalAlign="left">
			<mx:Label text="Lexicon: "/>
			<mx:ComboBox id="lexicaList" dataProvider="{searchComponent.lexica}" maxWidth="400"
						 labelField="name" change="onLexiconChange(event)"/>
		</mx:HBox>
		<mx:HBox width="100%" height="30" horizontalAlign="left" verticalAlign="middle">
			<mx:Label paddingLeft="10" text=" where "/>
			<mx:ComboBox id="dcList" dataProvider="{dataCategories}" width="200"
						 labelField="name" visible="true" change="onDataCategoryChange(event)"/>
			<com:IconComboBox id="dc_condition" dataProvider="{conditionItems}" change="onDcConditionChange(event)"
							  labelField="label" iconField="icon" x="10" y="10"/>
			<mx:CheckBox id="negationBox"/>
			<mx:Label text="not"/>
		</mx:HBox>
		<mx:HBox width="100%" height="100%" horizontalAlign="left" paddingLeft="65">
			<mx:TextArea id="searchInput" change="onEditChange(event)" width="250" height="60"/>
			<mx:CheckBox id="caseSensitiveCheckbox" selected="false" label="aBc"/>
			<mx:Button id="searchBtn" label="search" enabled="false"
					   click="doSearch(event)"/>
		</mx:HBox>
	</mx:VBox>
</mx:Canvas>

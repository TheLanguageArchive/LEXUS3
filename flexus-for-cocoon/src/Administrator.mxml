<?xml version="1.0" encoding="utf-8"?>
<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:mpi="nl.mpi.lexus.*" xmlns="*"
		   layout="vertical" creationComplete="init();" label="Users">
	
	<mx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			
			import flash.sampler.getInvocationCount;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ICollectionView;
			import mx.collections.IViewCursor;
			import mx.containers.Grid;
			import mx.containers.GridItem;
			import mx.containers.GridRow;
			import mx.containers.HBox;
			import mx.containers.Panel;
			import mx.containers.TabNavigator;
			import mx.controls.Alert;
			import mx.controls.Image;
			import mx.controls.TextArea;
			import mx.controls.VideoDisplay;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.core.Container;
			import mx.core.FlexGlobals;
			import mx.core.IUIComponent;
			import mx.core.UIComponent;
			import mx.core.UITextField;
			import mx.events.CloseEvent;
			import mx.events.CollectionEvent;
			import mx.events.CollectionEventKind;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ListEvent;
			import mx.events.MenuEvent;
			import mx.events.PropertyChangeEvent;
			import mx.events.StateChangeEvent;
			import mx.events.VideoEvent;
			import mx.managers.DragManager;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			import nl.mpi.lexus.LexiconTreeItemRenderer;
			import nl.mpi.lexus.LexusUtil;
			import nl.mpi.lexus.YesNo;
			import nl.mpi.lexus.event.ImportCompleteEvent;
			import nl.mpi.lexus.service.LexusService;
			
			[Bindable]
			public var user: Object;
			
			[Bindable] private var users:Array;
			
			[Bindable] public var accesslevels:Array = [10, 30]; // ATM everybody has 10, except the Administrator, she has 30.
			
			private var lexusService:LexusService = new LexusService();
			
			private function init():void {
				this.mainCanvas.enabled = false;
				user = new Object();
				LexusUtil.showWait(this, "Loading users");
				lexusService.send("LexusWorkspaceEditor/getUsers.json", null, this.name, onUsersLoad);
			}
			
			/**
			 * Event Handler for the onLoad event. This will load the JSON object and perform initialization
			 * */
			private function onUsersLoad(event:ResultEvent):void {
				LexusUtil.parseJSON(String(event.result),
					function(data:Object):void {
						users = data.result.users;
						usersView.title = "Users (" + users.length + ")";
						LexusUtil.removeWait();
					}
				);
				this.mainCanvas.enabled = true;
			}
			
			/**
			 * Event handler for the Menu control's click event.
			 **/
			private function onMenuSelect(event:MenuEvent):void {
				FlexGlobals.topLevelApplication.dispatchEvent(event);
			}
			
			
			private function newUser(event: MouseEvent):void {
				var pop2:AddUser = AddUser(PopUpManager.createPopUp(this,AddUser,true));
				pop2.addEventListener("newUser", this.handleNewAddUserUpdate);
				PopUpManager.centerPopUp(pop2);
			}
			
			private function handleNewAddUserUpdate(event:Event):void{
				init();
			}
			
			/**
			 * Attempts to store the user on the server. The (succesfull) response is forwarded to onSaveResult
			 **/ 
			private function requestSave():void {
				var lexusService:LexusService = new LexusService();
				//				lexusService.send("LexusWorkspaceEditor/saveUser.json", userData, "workspace", onSaveResult);
			}
			/**
			 * Callback method for the server user save response. A new Event is dispatched to signal creation of a new lexicon.
			 * 
			 **/ 
			private function onSaveResult(event:ResultEvent):void {
				LexusUtil.parseJSON(String(event.result),
					function(data:Object):void {
						var evnt:Event = new Event("newUser");
						dispatchEvent(evnt);
						
						
						(usersDG.dataProvider as ArrayCollection).addItem(event.result.user);
					}
				);
			}
			
			/**
			 * Get String repr. of access level.
			 **/
			public function getAccessLevelAsString(data:Object):String {
				var al:String = "*** UNKNOWN ACCESS LEVEL ***";
				switch (data) {
					case  0: al = "USER"; break;
					case 10: al = "USER"; break;
					case 20: al = "USER"; break;
					case 30: al = "ADMINISTRATOR"; break;
				}
				return al;
			}
			public function getAccessLevelAsString2(data:Object, dummy:Object):String {
				return getAccessLevelAsString(data.accesslevel);
			}
			
			
			private function removeUser(event: MouseEvent):void {
				YesNo.confirmDelete("Are you sure you want to remove this user?", confirmDeleteUserHandler);
				
			}
			
			private function confirmDeleteUserHandler(event:CloseEvent):void {
				if (event.detail == Alert.YES) {
					LexusUtil.showWait(this, "Removing user");
					FlexGlobals.topLevelApplication.enabled = false;
					
					user.id = this.usersDG.selectedItem.id;
					
					lexusService.send("LexusWorkspaceEditor/deleteUser.json", user, this.name, onRemoveResult);		
				} 
			}
			
			/**
			 * Callback method for the server user remove response. A new Event is dispatched to signal deletion of a user.
			 * 
			 **/ 
			private function onRemoveResult(event:ResultEvent):void {
				LexusUtil.parseJSON(String(event.result),
					function(data:Object):void {
						user = data.result.deletedUser;
						var evnt:Event = new Event("removedUser");
						dispatchEvent(evnt);
						
						var idx:int = usersDG.selectedIndex;
						(usersDG.dataProvider as ArrayCollection).removeItemAt( idx);
						usersDG.selectedIndex = idx;
						
						LexusUtil.removeWait();
						FlexGlobals.topLevelApplication.enabled = true;
						
						
					}
				);
			}
			
			
			/**
			 * Handle Collection change event.
			 **/
			/*
			private function userChanged(event:CollectionEvent):void {
			switch (event.kind) {
			case CollectionEventKind.ADD:
			for (var i:uint = 0; i < event.items.length; i++) {
			addUser(event.items[i]);
			}
			break;
			
			case CollectionEventKind.UPDATE:
			for (var i:uint = 0; i < event.items.length; i++) {
			if (event.items[i] is PropertyChangeEvent) {
			if (PropertyChangeEvent(event.items[i]) != null) {
			updateReservationBox(Reservation(PropertyChangeEvent(
			event.items[i]).source));
			}
			}
			else if (event.items[i] is Reservation) {
			updateReservationBox(Reservation(event.items[i]));
			}
			}
			break;
			}
			}
			*/
		]]>
	</mx:Script>
	
	<mx:Component className="AccessLevelEditor">
		<mx:VBox backgroundColor="yellow" width="110">
			<mx:Script>
				<![CDATA[
					// Define a property for returning 
					// the new value to the cell.
					[Bindable] public var cbAccessLevel:int;
				]]>     
			</mx:Script>
			<mx:ComboBox id="pickAccessLevel" width="110"
						 selectedItem="{data.accesslevel}" labelFunction="outerDocument.getAccessLevelAsString"
						 updateComplete="cbAccessLevel = pickAccessLevel.selectedItem.valueOf()"
						 dataProvider="{outerDocument.accesslevels}">
			</mx:ComboBox>
		</mx:VBox>
	</mx:Component>
	
	<mx:Canvas id="mainCanvas" width="100%" height="100%">
		<mx:HBox width="100%" height="100%" paddingLeft="4" paddingRight="4" paddingBottom="4" paddingTop="0" verticalGap="0">
			<mx:VBox id="adminMain" visible="true" width="100%" height="100%" verticalGap="0">
				<mx:Canvas width="100%" height="100%"
						   backgroundAlpha="0.0">
					<mx:Panel id="usersView"  title="Users" width="700">
						<mx:HBox width="100%" >
							<mx:VBox width="100%">
								<mpi:DoubleClickDataGrid id="usersDG" xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" editable="true"
														 dataProvider="{users}"> <!--  change="userChanged(event)" -->
									<mpi:columns>
										<mx:DataGridColumn  headerText="Name" dataField="name" />
										<mx:DataGridColumn headerText="Username" dataField="account" width="200" /><!-- restrict="a-zA-Z0-9\-_" -->
										<mx:DataGridColumn headerText="Password" dataField="password" width="100" />
										<mx:DataGridColumn headerText="Access level" dataField="accesslevel"
														   labelFunction="getAccessLevelAsString2" width="111" editorDataField="cbAccessLevel"
														   itemEditor="AccessLevelEditor">
										</mx:DataGridColumn>
									</mpi:columns>
								</mpi:DoubleClickDataGrid>
							</mx:VBox>
						</mx:HBox>
						<mx:ControlBar horizontalAlign="left" width="100%">
							<mx:Image source="{FlexGlobals.topLevelApplication.addIcon}"
									  click="newUser(event)" toolTip="Add user"/>
							<mx:Image source="{FlexGlobals.topLevelApplication.removeIcon}"
									  click="removeUser(event)" toolTip="Remove user"/>
						</mx:ControlBar>
						
					</mx:Panel>
				</mx:Canvas>
			</mx:VBox>
		</mx:HBox>
	</mx:Canvas>
</mx:Module>

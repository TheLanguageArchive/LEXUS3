<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:flexiframe="http://code.google.com/p/flex-iframe/"
	xmlns:mpi="nl.mpi.lexus.*"
	xmlns="*"
	xmlns:local="*"
    title="Lexical entry details"
    showCloseButton="true"    
    close="this.finalize();" paddingTop="20" paddingRight="20"
    move="onMove(event)">

	

    <mx:Script>
        <![CDATA[
        	import com.adobe.serialization.json.JSON;
        	
        	import mx.containers.Panel;
        	import mx.controls.Alert;
        	import mx.core.FlexGlobals;
        	import mx.core.UIComponent;
        	import mx.events.CloseEvent;
        	import mx.events.IndexChangedEvent;
        	import mx.events.MoveEvent;
        	import mx.events.ResizeEvent;
        	import mx.managers.LayoutManager;
        	import mx.managers.PopUpManager;
        	import mx.rpc.events.ResultEvent;
        	
        	import nl.mpi.lexus.LexusUtil;
        	import nl.mpi.lexus.YesNo;
        	import nl.mpi.lexus.editor.Editor;
        	import nl.mpi.lexus.event.LexicalEntryChangeEvent;
        	import nl.mpi.lexus.service.LexusService;
        	
        	[Bindable]
        	private var serverData:Object;
        	private var moveEnabled:Boolean = false;
        
        	[Bindable]
            [Embed(source="../assets/images/pictures.gif")]
			private var imageIcon:Class;
			
        	[Bindable]
            [Embed(source="../assets/images/video.gif")]
			private var videoIcon:Class;
        	
        	[Bindable]
            [Embed(source="../assets/images/audio.gif")]
			private var audioIcon:Class;
        	
        	[Bindable]
            [Embed(source="../assets/images/mediafile.gif")]
			private var mediaFileIcon:Class;
        	
        	[Bindable]
            [Embed(source="../assets/images/writtenresource.gif")]
			private var writtenResourceIcon:Class;
			
			private var lexusService:LexusService = new LexusService();
			private var editor:Editor = new Editor();
			
			public function set entryId(a_entryId:String):void{
				var param:Object = new Object();
				param.id = a_entryId;
				this.lexusService.send("LexusLexicalEntryEditor/loadLexicalEntry.json", param, this.name, this.onJSONLoad);
			}
        	
        	/**
			 * Event Handler for the onLoad event. This will load the JSON object and perform initial initialization
			 * */
			private function onJSONLoad(event:ResultEvent):void	{	
				LexusUtil.parseJSON(String(event.result),
					function(data:Object):void {
						data.result.lexicalEntry.listView.value = transformListView(data.result.lexicalEntry.listView.value);
						serverData = data;
						tabNav.selectedChild = entryTab;
						iFrame.source = serverData.result.lexicalEntry.entryView;
						iFrame.visible=true;
						moveEnabled = true;
						tree.validateNow();
						tree.selectedIndex = 0;
						tree.expandChildrenOf( tree.selectedItem, true);
				 		editor.addEventListener("change", onLexicalEntryChange);
		   				LexusUtil.removeWait();
					}
				);
				this.enabled = true;
   			}   
   			private function onLexicalEntryChange( event:LexicalEntryChangeEvent):void{
   				tree.invalidateDisplayList();
				tree.invalidateList();
   				this.saveBtn.enabled = true;
   			}
   			
   			private function transformListView(listViewHTML:String):String{
				
				 var txt:String = listViewHTML;
										
        	 	var ltPattern:RegExp = /&lt;/g;
        	 	txt = txt.replace(ltPattern, "<");
        	 	var gtPattern:RegExp = /&gt;/g;
        	 	txt  =txt.replace(gtPattern, ">");
        	 	var qtPattern:RegExp = /&quot;/g;
        	 	txt  =txt.replace(qtPattern, "'");
        	 	var ampPattern:RegExp = /&amp;amp;/g;
        	 	txt  =txt.replace(ampPattern, "&");
        	 	//txt = "<![CDATA[" + txt + "]]" + ">";
        	 	
        	 	return txt;
			}
			
   			
   			private function tabChanged(event:IndexChangedEvent):void{
   				if( tabNav.selectedChild == entryTab)
   					iFrame.visible = true;
   				else if( tabNav.selectedChild == treeTab){
   					
   					iFrame.visible = false;
   					editor.initializeEditor( this.serverData.result.lexicalEntry, this.detailPanel, this.serverData.result.isEditable, 170);
   				}
   			}
   			
   			private function finalize():void{
				if( this.saveBtn.enabled) 
					YesNo.confirmSave("There are unsaved modifications to the selected lexical entry! " +
						"Do you want to save them?", saveEntryOnClose);
   				iFrame.visible= false;   	
   				PopUpManager.removePopUp(this);
   			}
   			
   			private function onMove(event:MoveEvent):void{
   				
   				if( this.moveEnabled){
	   				var dx:int = this.x - event.oldX;
	   				var dy:int = this.y - event.oldY;
	   				iFrame.move( dx, dy);
	   			}	
   				
   				
   			}
   			private function generateTreeLabel( item:Object):String{
   				var label:String = item.label;
   				if( item.children == null)
   					label+= ": " + item.value;
   				if( label.length > 50)
   					label = label.substr(0, 50) + "...";
   				return label;
   			}

   			private function showValue():void{
   				this.editor.setFocus( this.tree.selectedItem.id);
   				return;
   				
   			}
   			
   			private function getIcon( item:Object):Class{
   				var iconClass:Class = null;
   				if( item.children == null){
   					if( item.multimedia == null)
   						iconClass = this.writtenResourceIcon;
   					else if( item.multimedia.type=="image")
   						iconClass = this.imageIcon
   					else if( item.multimedia.type=="video")
   						iconClass = this.videoIcon;
   					else if( item.multimedia.type=="audio")
   						iconClass = this.audioIcon;
   					else 
						iconClass = this.mediaFileIcon;
   				}
   				return iconClass;
   			}
			
   			
   			private function onSave(event:MouseEvent):void{
   				if( this.saveBtn.enabled){
					this.enabled = false;
	   				LexusUtil.showWait(this, "Saving entry");
	       			var param:Object = new Object();
					param.lexicalEntry  = this.serverData.result.lexicalEntry;
					param.schema = this.serverData.result.mySchema;	
					param.lexicon = this.serverData.result.lexiconId;	
					this.saveBtn.enabled = false;
					this.lexusService.send("LexusLexicalEntryEditor/saveLexicalEntry.json", param, this.name, onJSONLoad);
   				}
   			} 
			
			
			private function saveEntryOnClose(event:CloseEvent):void{
				if (event.detail == Alert.YES) {
				LexusUtil.showWait(this, "Saving entry");
				FlexGlobals.topLevelApplication.enabled = false;
				var param:Object = new Object();
				param.lexicalEntry  = this.serverData.result.lexicalEntry;
				param.schema = this.serverData.result.mySchema;	
				this.lexusService.send("LexusLexicalEntryEditor/saveLexicalEntry.json", param, this.name, 
					function():void {
						LexusUtil.removeWait();
						FlexGlobals.topLevelApplication.enabled = true;
					}
				);
				}

			}
        ]]>
    </mx:Script>

	
		   
    <mx:Canvas width="100%" height="100%"
			   focusIn="FlexGlobals.topLevelApplication.overlayUnicodeInput(event)">
	   <mx:VBox width="100%" height="100%">
	   		<mx:HBox width="100%" horizontalAlign="center">
				<mx:HBox width="90%" horizontalAlign="center">
					<mx:Text htmlText="{this.serverData.result.lexicalEntry.listView.value}" condenseWhite="true" />
				</mx:HBox>
				<mx:HBox width="10%" horizontalAlign="right">
			   		<mx:Button id="saveBtn" label="Save" click="onSave(event)" enabled="false" paddingRight="10"/>
				</mx:HBox>
			</mx:HBox>		
	   		<mx:TabNavigator id="tabNav" width="100%" height="100%" creationPolicy="all" change="tabChanged(event)" paddingLeft="20">
	   			<mx:Canvas label="Entry" id="entryTab" width="100%" height="100%">
					<flexiframe:IFrame id="iFrame" source="" x="10" y="10" width="90%" height="100%" visible="false"/>
	   			</mx:Canvas>
	   			<mx:Canvas label="Details" id="treeTab" width="100%" height="100%">
	   				<mx:HDividedBox width="100%" height="100%">
	   					<mx:Panel width="25%" height="100%">
	   						<mpi:AutoSizeTree id="tree" width="100%" height="100%" dataProvider="{this.serverData.result.lexicalEntry}" labelFunction="generateTreeLabel" iconFunction="getIcon" click="showValue()"/>	
	   					</mx:Panel>
	   					<mx:Panel id="detailPanel" width="75%" height="100%">
							<mx:Panel id="editorPanel" width="100%" height="100%"/>
						</mx:Panel>	   					
	   				</mx:HDividedBox>	   				
	   			</mx:Canvas>	   				
	   		</mx:TabNavigator>	   	
	   </mx:VBox>     	
    </mx:Canvas>
</mx:TitleWindow>
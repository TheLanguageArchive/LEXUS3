<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" backgroundColor="0xFFFFCC"
				creationComplete="initApp()">
	
	<mx:Script>
		<![CDATA[
			import mx.collections.SortField;
			import mx.collections.Sort;
			import mx.collections.XMLListCollection;
			import mx.events.ListEvent;
			import mx.controls.List;
			import mx.collections.ArrayCollection;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.controls.Alert;
			
			import flash.system.Security;
			
			import com.adobe.serialization.json.*;
			
			private var wholeXML:XMLList;
			[Bindable] private var currentResourceId:String;
			[Bindable] private var currentResourceName:String;
			[Bindable] private var currentDataCategoryID:String;
			[Bindable] private var currentDataCategoryName:String;
			
			[Bindable] private var treeData:XML;
			
			private namespace lexus = "/bGV4aWNhbEVudHJ5LzJjOTA5MGMyMjQzMmYxYjIwMTI0MzQwMjY5MzkwMDYy/";
			use namespace lexus;
			
			private function initApp():void{
				
			}
			
			public function doLogin(event:Event):void{
				//			lexusWebService.login("hhv", "hhv");
				//		lexusWebService.login("SignLincProject", "RadboudNGC");
				lexusWebService.login("vicos", "vicos");
			}
			
			public function doLoginResult(event:ResultEvent):void{
				trace("login result:", event.result);
				lexusWebService.getResources();
			}			
			
			public function doLoginFault(event:FaultEvent):void{
				trace("login fault:", event.message);
			}
			
			
			public function doSearch(evt:MouseEvent):void{
				searchResult.text = "";
				//				trace("%%%%%%\n", querySnippet);
				var xml:XML = new XML();
				lexusWebService.search(querySnippet.toString(), 0, 10);
			}
			
			public function doSearchResult(event:ResultEvent):void{
				//trace("search result:", event.result);
				
				
				var labelExp:RegExp = /\<([A-Za-z0-9_]+)( [^>]+)?\>/g;
				var xmlString:String = event.result.toString();
				
				xmlString = xmlString.replace(labelExp, "<$1 label='$1'$2>");
				
				trace("xmlString:", xmlString);
				
				treeData = new XML(xmlString);
				
				searchResult.text = this.restoreCharacters(event.result.toString());
				dataTree.dataProvider = treeData;
				
				trace("currentDataCategoryName:", currentDataCategoryName);
				
				var list:XMLList = treeData..*;
				var listColl:XMLListCollection = new XMLListCollection(list);
				listColl.filterFunction = filterListColl; 
				listColl.refresh();
				
				dataTree.openItems = listColl;					
			}			
			
			private function filterListColl(item:Object):Boolean{
				for each (var node:XML in item..*){
					//					trace("node.namespace:", node.namespace());
					if (node.namespace() == null){
						if (node.parent().name() != null && node.parent().name().toString().indexOf(currentDataCategoryName) != -1){
							return true;
						}
					}
					else{
						if (node.parent().name() != null && node.parent().name().toString().indexOf(node.namespace() + "::" + currentDataCategoryName) != -1){
							return true;
						}
					}
					//					if (node.parent().name() != null && node.parent().name().toString().indexOf("::" + currentDataCategoryName) != -1){
					//						return true;
					//					}
				}
				return false;
			}
			
			private function openTreeItems():void{
			}
			
			public function doSearchFault(event:FaultEvent):void{
				//				trace("search fault:", event.message);
				searchResult.text = "FAULT: " + event.message;
			}
			
			private function removeItems(item:Object):Boolean{
				//				trace("item:", item);
				if (item == "SHLEX SAMPLE"){
					return false;
				}
				return true;
			}
			
			public function getResourcesResult(event:ResultEvent):void{
				trace("resources result:", event.result);
				
				wholeXML = XMLList(this.restoreCharacters(event.result.toString()));
				
				
				var names:XMLList = new XMLList(wholeXML.lexicon.lexiconInformation.name);				
				var coll:XMLListCollection = new XMLListCollection(names);				
				
				coll.filterFunction = removeItems;
				coll.refresh();
				
				resourceList.dataProvider = coll;
				resourceList.labelField = "lexiconInformation";
				resourceChanged();
				
				submitSearchBtn.enabled = true;
			}
			
			public function getResourcesFault(event:FaultEvent):void{
				trace("resources fault:", event.message);
			}
			
			
			public function getResourceResult(event:ResultEvent):void{
				//				trace("resource result:", event.result);
				
				currentContent.text = this.restoreCharacters(event.result.toString());
				
			}
			
			public function getResourceFault(event:FaultEvent):void{
				trace("resource fault:", event.message);
			}
			
			public function getDataCategoriesResult(event:ResultEvent):void{
				//				trace("***********************");
				//				trace("data categories result:", event.result);
				
				currentDataCategories.text = this.restoreCharacters(event.result.toString());
				
				var xml:XML = new XML(event.result);
				var list:XMLList = xml.datacategory;
				var coll:XMLListCollection = new XMLListCollection(list);
				
				var sort:Sort = new Sort();
				sort.fields = [new SortField(null, true)];
				coll.sort = sort;
				trace(coll.length);
				coll.refresh();
				
				categoriesList.dataProvider = list;
				categoriesList.selectedIndex = 0; 
				categoryChanged();
			}
			
			public function getDataCategoriesFault(event:FaultEvent):void{
				trace("data categories fault:", event.message);
			}			
			
			
			public function getSchemaResult(event:ResultEvent):void{
				trace("***********************");
				trace("schema result:", event.result);
				currentSchema.text = event.result.toString();
			}
			
			public function getSchemaFault(event:FaultEvent):void{
				trace("***********************");
				trace("schema fault:", event.message);
			}		
			
			
			private function restoreCharacters(a_string:String):String{
				var paternSpace:RegExp = /_x0020_/g;
				var paternLPar:RegExp = /_x0028_/g;
				var paternRPar:RegExp = /_x0029_/g;
				var str:String = new String(a_string);
				str = str.replace(paternSpace, " ");
				str = str.replace(paternLPar, "(");
				str = str.replace(paternRPar, ")");
				return str;
				
			}
			
			
			private function resourceChanged(event:ListEvent = null):void{
				for each (var xml:XML in wholeXML.lexicon){
					var list:XMLList = new XMLList(this.restoreCharacters(xml.toString()));
					if (list.lexiconInformation.name == resourceList.selectedItem){
						currentDescription.text = list;
						
						currentSchema.text = "";
						currentContent.text = "";
						
						currentResourceId = list.@id;
						currentResourceName = list.lexiconInformation.name;
						
						trace("currentResource:", currentResourceId, currentResourceName);
						
						trace("list.@id:", list.@id);
						
						lexusWebService.getSchema(list.@id);
						lexusWebService.getResource(list.@id);
						lexusWebService.getDataCategories(list.@id);
						break;
					}
					
				}
			}
			
			private function categoryChanged(event:ListEvent = null):void{
				currentDataCategoryID = categoriesList.selectedItem.@id;
				currentDataCategoryName = categoriesList.selectedItem.name;
				trace("current data category:", categoriesList.selectedItem.@id, currentDataCategoryName);
			}	
			
		]]>
	</mx:Script>
	
	<mx:XML id="querySnippet">
		<query>
			<id/>
			<name/>
			<lexicon>
				<id>{currentResourceId}</id>
				<name>{currentResourceName}</name>
				<children>
					<parameter>
						<id>{currentDataCategoryID}</id>
						<name>Definition (E)</name>
						<condition>contains</condition>
						<negation>false</negation>
						<value>{searchTerm.text}</value>
						<children/>
					</parameter>
				</children>
			</lexicon>
		</query>
	</mx:XML>
	
	<mx:WebService id="lexusWebService" wsdl="http://lux16.mpi.nl:8082/mpi/lexusDojo/services/LexusService?wsdl">
		<mx:operation name="login" result="doLoginResult(event)" fault="doLoginFault(event) "/>
		<mx:operation name="getResources" result="getResourcesResult(event)" fault="getResourcesFault(event) "/>
		<mx:operation name="getResource" result="getResourceResult(event)" fault="getResourceFault(event) "/>
		<mx:operation name="getDataCategories" result="getDataCategoriesResult(event)" fault="getDataCategoriesFault(event) "/>
		<mx:operation name="getSchema" result="getSchemaResult(event)" fault="getSchemaFault(event) "/>
		<mx:operation name="search" result="doSearchResult(event)" resultFormat="object" fault="doSearchFault(event) "/>
	</mx:WebService>
	
	<mx:Button label="Get resources" click="doLogin(event)"  x="170" y="10"/>
	
	<mx:Label x="10" y="43" text="Ressource list:"/>
	<mx:ComboBox id="resourceList" width="180" x="170" y="41.5" change="resourceChanged(event)" />
	
	<mx:Label x="10" y="108" text="Current lexicon description:"/>
	<mx:TextArea id="currentDescription" width="300" height="130" x="170" y="107" />
	
	<mx:Label x="10" y="246" text="Current lexicon schema:"/>
	<mx:TextArea id="currentSchema"  width="300" height="130" x="170" y="245"/>
	
	<mx:Label x="10" y="386" text="Current lexicon content:"/>
	<mx:TextArea id="currentContent"  width="300" height="130" x="170" y="385"/>
	
	<mx:Label x="10" y="526" text="Current data categories:"/>
	<mx:TextArea id="currentDataCategories"  width="300" height="130" x="170" y="525"/>
	
	<mx:Label x="490" y="108" text="Current lexicon search:"/>
	<mx:Label x="490" y="138" text="Data categories:"/>
	<mx:List x="630" y="135" height="73" id="categoriesList" labelField="name" width="280" change="categoryChanged(event)"/>
	
	<mx:TextInput id="searchTerm" text="e" x="630" y="107"/>
	<mx:Button id="submitSearchBtn" x="630" y="216" label="Submit" click="doSearch(event)" enabled="false"/>
	
	<mx:VRule x="480" y="100" width="2" height="550"/>
	<mx:Label x="494" y="247" text="Search result:"/>
	
	<mx:TextArea x="630" y="245" width="280" height="159" id="searchResult"/>
	<mx:Tree showRoot="false" x="630" y="412" width="280" height="243" id="dataTree" labelField="@label" />
	
	<mx:TextArea visible="true" width="280" height="96.28788" x="630" y="662.6">
		<mx:htmlText>
			<![CDATA[
			<span><span><span><font color="#ccff" face="Arial" size="16"><b>[<span><span id="YmNkZTA1NmQtNDM3Yi00MjIzLWFhZWYtOGQwMDE3MTAzZWIw">&#76;&#105;&#114;&#108;&#117;</span></span>]</b></font><span>&gt;-<font color="#0" face="Arial" size="14"><b><span><span id="YmNkYzM3NjUtMDMxYi00N2U4LTliMWUtNTYwMDRkYTMzMTIy">&#112;&#114;&#111;&#112;&#101;&#114;&#32;&#110;&#46;</span></span></b></font>-&lt;</span></span></span></span>
			]]>			
		</mx:htmlText>
	</mx:TextArea>
	
</mx:Application>

<?xml version="1.0" encoding="utf-8"?>
<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:mpi="nl.mpi.lexus.*"
	xmlns:flexiframe="http://code.google.com/p/flex-iframe/"
	layout="absolute" width="100%" height="100%"
	creationComplete="init();" xmlns:local="*">

	<mx:Style source="styles/lexus.css"/>
	<mx:Style source="styles/ConventionsLana.css"/>
	<mx:Style source="../resources/assets/css/styles.css"/>
 
	<mx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			import mx.collections.ICollectionView;
			import mx.collections.IViewCursor;
			import mx.controls.Alert;
			import mx.core.Application;
			import mx.core.FlexGlobals;
			import mx.core.IUIComponent;
			import mx.events.CloseEvent;
			import mx.events.DragEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ListEvent;
			import mx.events.MenuEvent;
			import mx.formatters.SwitchSymbolFormatter;
			import mx.managers.DragManager;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			import nl.mpi.lexus.LexusUtil;
			import nl.mpi.lexus.YesNo;
			import nl.mpi.lexus.event.NewLexiconEvent;
			import nl.mpi.lexus.event.SortOrderChangeEvent;
			import nl.mpi.lexus.service.LexusService;
      		
			[Bindable]
			private var serverData:Object;

			[Bindable]
			private var userData:Object = null;
			
			[Bindable]
			private var users:Array = null;
			
			[Bindable]
			private var searchResults:Object;
            
            [Bindable][Embed(source="../assets/images/icon_sharedLexicon.gif")] private var sharedLexiconIconClass:Class;
            [Bindable][Embed(source="../assets/images/icon_new.jpg")] private var newLexiconIcon:Class;
            [Bindable][Embed(source="../assets/images/icon_sort.gif")] private var sortOrderIconClass:Class;			
			[Bindable][Embed(source="../assets/images/icon_user.jpg")] private var userIcon:Class;
			
			/**
			 * Internal indicator used to indicate the latest lexicon to save
			 **/ 
			private var saveLexiconTarget:Object;

			/**
			 * Internal indicator for identifiying the latest sortOrder to save
			 **/ 
			private var saveSortOrderTarget:Object;

			/**
			 * A place to save an event. In case we need to save some data
			 *  while processing an event we park the event here.
			 **/
			private var originalEvent:Event;
			
			/**
			 * A place to store the originally selected Item so that it can
			 * be reselected when reloading a lexicon.
			 **/
			private var originallySelectedIndex:Number;
			
			/**
			 * Refers to the actionscript component responsible for assembling the service
			 **/ 
			private var lexusService:LexusService = new LexusService();

			
            private function init():void {
				this.tabberd.selectedChild = this.lexiconTab;
				LexusUtil.showWait(this, "Loading workspace");				
            	lexiconDetailsTab.enabled = true;
            	originalEvent = null;
            	originallySelectedIndex = -1;
   				sortOrderComponent.addEventListener("change", this.onSortOrderChange);
				lexusService.send( "LexusWorkspaceEditor/getPage.json", null, this.name, onJSONLoad);         	
            }
                        
			/**
			 * Event Handler for the onLoad event. This will parse the JSON object and perform initialization
			 * */
			private function onJSONLoad(event:ResultEvent):void {
				LexusUtil.parseJSON(String(event.result),
					function(data:Object):void {
						serverData = data;
						if (serverData.result.myLexica != null) {
							lexicaList.validateNow();
							lexicaList.selectedIndex = 0;
							showLexicon();
							searchComponent.queryBuilder.availableLexica = serverData.result.myLexica;
							// HHV: Store the lexica on the Application level, no need to constantly load it
							// in different formats! QueryBuilder uses this when called from LexiconBrowser.
							FlexGlobals.topLevelApplication.lexica = serverData.result.myLexica;
						}
						/**
						 * Store info about the user in a global object,
						 * so we can refer to it from other modules.
						 **/
						if (serverData.result.user) {
							FlexGlobals.topLevelApplication.lexusUser = serverData.result.user;
							if (FlexGlobals.topLevelApplication.lexusUser.administrator) {
								tabberd.addChild(new Administrator());
							}
						}
						/**
						 * Store info about Lexus global object,
						 * so we can refer to it from other modules.
						 **/
						if (serverData.result.lexus){
							FlexGlobals.topLevelApplication.aboutLexus = serverData.result.lexus;
						}						
						/**
						 * Store info about VICOS,
						 * so we can refer to it in Lexus.
						 **/
						if(serverData.result.VICOS){
							FlexGlobals.topLevelApplication.VICOS = serverData.result.VICOS;
						}
						LexusUtil.removeWait();
					}
				);
				FlexGlobals.topLevelApplication.moduleInitialised("workspace");
   			}
			   			 
			/**
			 * Event Handler for the onLoad event. This will parse the userdata object and perform initialization
			 * */
			private function onJSONLoadUsers(event:ResultEvent):void
			{
				LexusUtil.parseJSON(String(event.result),
					function(data:Object):void {
						users = data.result.profiles;
						users.sortOn(["administrator", "name"], Array.CASEINSENSITIVE);
						
						activeUsers1.dataProvider = users;
						activeUsers2.dataProvider = users; 

					}
				);   
   			}
   			
   			/**
   			 * Event handler for the Menu control's click event.
   			 **/
            public function onMenuSelect(event:MenuEvent):Boolean {
            	var handled:Boolean = true;
            	this.originalEvent = null;
           		this.originallySelectedIndex = -1;
            	var evtName:String = event.item.@eventName;
            	//YesNo.alert("handling event in workspace, event=" + event + ", event.item=" + event.item + ", eventName=" + evtName);
            	
            	/**
            	 * Handle "Save event" first, if it's not a save event check for need to save.
            	 **/
            	if (evtName == "save") {
            		save();
            		return true;
            	}

	           	/** Request Save actions for other menu items, if necessary.
	           	 *  If something needs saving, store the original event so that it can
	           	 *  be dispatched again after the save.
	           	 **/
            	if (requestSave()) {
	           		this.originalEvent = event;
            		this.originallySelectedIndex = this.lexicaList.selectedIndex;
            		return true;
            	}
            	
            	switch (evtName) {
                	case "import_xml":
						// var popXMLImport:XMLImport = XMLImport(PopUpManager.createPopUp(this,XMLImport,true));
						var popXMLImport:ImportLexusXML = ImportLexusXML(PopUpManager.createPopUp(this,ImportLexusXML,true));
						popXMLImport.sessionId = serverData.result.sessionId;
						popXMLImport.addEventListener("new", handleLexiconImport);
                		break;
                	case "import_shbx":
                		var popShbxImport:ShbxImport = ShbxImport(PopUpManager.createPopUp(this,ShbxImport,true));
                		popShbxImport.existingLexicon = false;
						popShbxImport.sessionId = serverData.result.sessionId;
						popShbxImport.addEventListener("new", handleLexiconImport);
						PopUpManager.centerPopUp(popShbxImport);
						popShbxImport.y = 20;
                		break;					
					case "convert_toolbox":
						var popToolboxConverter:ToolboxConverter = ToolboxConverter(PopUpManager.createPopUp(this,ToolboxConverter,true));
						popToolboxConverter.sessionId = serverData.result.sessionId;
//						popToolboxConverter.addEventListener("new", handleLexiconImport);
						PopUpManager.centerPopUp(popToolboxConverter);
						popToolboxConverter.y = 20;
						break;
                 	case "schema_editor":
			    		if (this.lexicaList.selectedItem == null) {
			   				YesNo.alert("Please select a lexicon first");
			    			return true;
			    		}
			    		FlexGlobals.topLevelApplication.lexiconId = this.lexicaList.selectedItem.id;
			    		handled = false;
                		break;
                	case "lexicon_browser":
			    		if (this.lexicaList.selectedItem == null) {
			   				YesNo.alert("Please select a lexicon first");
			    			return true;
			    		}	
			    		FlexGlobals.topLevelApplication.lexiconId = this.lexicaList.selectedItem.id;
			    		handled = false;
                   		break;
					case "export_all_xml":
						var url:String = lexusService.getAbsoluteURL("ExportAllXML.json");
						lexusService.send("ExportAllXML.json", null, this.name, function(data:Object):void {});
						break;
                	case "VICOS":
                		ExternalInterface.call("window.open", FlexGlobals.topLevelApplication.VICOS, "VICOS", "", false);
                		break;
                	case "refresh":
                		init();
                		break;
                	default:
                		handled = false;
                		break;
                }
                return handled;
            }
            
            /* Save unsaved data, called from menu event handler or keyboard handler */
            public function save():void {
        		if( this.saveLexiconTarget != null){
					FlexGlobals.topLevelApplication.enabled = false;
					LexusUtil.showWait(this, "Saving lexicon");					
            		this.lexusService.send("LexusWorkspaceEditor/saveLexicon.json", this.saveLexiconTarget, this.name, onLexiconReload);
            		this.saveLexiconTarget = null;
            	}
            	if( this.saveSortOrderTarget != null){
					FlexGlobals.topLevelApplication.enabled = false;
					LexusUtil.showWait(this, "Saving sortorder");
            		this.lexusService.send("LexusWorkspaceEditor/saveSortOrder.json", this.saveSortOrderTarget, this.name,
						function():void {
							LexusUtil.removeWait(); 
							FlexGlobals.topLevelApplication.enabled = true;
						}
            		);
            		this.saveSortOrderTarget = null;
            	}
        		if (searchComponent.saveNeeded()) {
					searchComponent.save();
        		}
            }
            
           	//Request Save actions for other menu items, if necessary.
            private function requestSave():Boolean {
            	if (this.saveLexiconTarget != null) {
            		this.requestLexiconSave();
            		return true;
            	}
            	if (this.saveSortOrderTarget != null){
            		this.requestSortOrderSave();
            		return true;
            	}
            	if (this.searchComponent.requestSave()) {
            		return true;
            	}
            	return false;
            }
            
            private function handleLexiconImport(event:NewLexiconEvent):void {
            	(this.lexicaList.dataProvider as ArrayCollection).addItem(event.lexicon);
				lexicaList.invalidateList();
            }
            
            private function onWorkspaceSortOrdersLoad(event:ResultEvent):void {
            	LexusUtil.parseJSON(String(event.result),
					function(data:Object):void {
		            	serverData.result.sortOrders = data.result.sortOrders;
		            	sortOrders.dataProvider = serverData.result.sortOrders;
		            	if(serverData.result.sortOrders.length >0)
		            		sortOrders.selectedIndex = 0;
		            	//LexusUtil.removeWait();
					}
				);
				this.sortOrdersTab.enabled = true;
            }
   			/**
   			 * Event handler for left tab changes.
   			 **/ 
   			private function leftTabChanged(event:IndexChangedEvent):void{
   				if( this.saveSortOrderTarget !=null){
   					this.requestSortOrderSave();
   				}
   				if( this.saveLexiconTarget != null){
   					this.requestLexiconSave();
   				}
   				if(this.searchComponent.requestSave())
   					return;
   				
   				switch (event.relatedObject){
   					case lexiconTab:
   						lexiconDetailsTab.enabled = true;
   						break;
   					case sortOrdersTab:
   						if( !serverData.result.hasOwnProperty("sortOrders")){
							this.sortOrdersTab.enabled = false;
							//LexusUtil.showWait(this, "Loading sortorder");					
   							this.lexusService.send("LexusWorkspaceEditor/loadWSSortOrders.json", null, this.name, onWorkspaceSortOrdersLoad);
   						}
   						break;
   					case searchTab:
   						//if (serverData.result.hasOwnProperty("queries")) {
							searchComponent.activated(serverData.result.queries as Array);
							//this.queryTab.enabled = false;
							//	LexusUtil.showWait(this, "Loading queries");					
   							// this.lexusService.send("LexusWorkspaceEditor/loadWSQueries.json", null, this.name, onWorkspaceQueriesLoad);
   						// }
   						break;
   				}
   			}
   			
   			/**
   			 * Marks the lexicon to save.
   			 **/
   			 private function markLexiconSavePoint():void{
   			 	this.saveLexiconTarget = lexicaList.selectedItem;
   			 }
   			 /**
   			 * Marks the sortOrder to save.
   			 **/
   			 private function markSortOrderSavePoint(sortOrder:Object):void{
   			 	this.saveSortOrderTarget = sortOrder;
   			 }
   			/**
			 * Handles the click events in the left tree. 
			 **/
			private function lexiconClicked(evt:ListEvent):void{
				if( this.saveLexiconTarget != null)
					requestLexiconSave();
				showLexicon();		
			}
			
			private function requestLexiconSave():void {
				YesNo.confirmSave("Do you want to save your changes?", confirmSaveHandler);
			}
			
			private function confirmSaveHandler(event:CloseEvent):void {
				if (event.detail == Alert.YES) {
					FlexGlobals.topLevelApplication.enabled = false;
					LexusUtil.showWait(this, "Saving");					
					this.lexusService.send("LexusWorkspaceEditor/saveLexicon.json", this.saveLexiconTarget, this.name, onLexiconReload);
				}
				else {
					FlexGlobals.topLevelApplication.enabled = false;
					LexusUtil.showWait(this, "Reloading lexicon");
					var param:Object = new Object();
					param.id=this.saveLexiconTarget.id;
					this.lexusService.send("LexusWorkspaceEditor/loadLexicon.json", param, this.name, onLexiconReload);
				}
				this.saveLexiconTarget = null;
			}
			/**
			 * Callback method for the lexicon modification response and for the reload lexicon response. These share that 
			 * when a lexicon is updated or reloaded that the lexicalist is to be updated as well to reflect the current
			 * state of the lexicon on the server. 
			 **/ 
			private function onLexiconReload(event:ResultEvent):void {
				LexusUtil.parseJSON(String(event.result),
					function(data:Object):void {
						var coll:ICollectionView = (lexicaList.dataProvider as ICollectionView);
						var cursor:IViewCursor = coll.createCursor();
						while (!cursor.afterLast){
							if (cursor.current.id == data.result.lexicon.id){
								cursor.remove();
								cursor.insert(data.result.lexicon);
								break;
							}
							cursor.moveNext();
						}
						LexusUtil.removeWait();
		           		lexicaList.selectedIndex = originallySelectedIndex;
						if (originalEvent != null) {
							FlexGlobals.topLevelApplication.menuBar.dispatchEvent(originalEvent);
							originalEvent = null;
						}
						FlexGlobals.topLevelApplication.enabled = true;
					}
				);
			}
			
			private function showLexicon():void {
				var lexicon:Object = lexicaList.selectedItem;
				if( lexicon != null){
					lexicon_name.text = lexicon.name;
					lexicon_description.text = lexicon.description;
					lexicon_notes.text = lexicon.note;
					if( lexicon.administrator || !lexicon.shared){
						this.lexusUsers1.enabled = true;
						this.lexusUsers2.enabled = true;
						this.remove_reader.enabled = true;
						this.remove_writer.enabled = true;
						this.remove_lexicon.enabled = true;
						this.lexicon_name.editable = true;
						this.lexicon_description.editable = true;
						this.lexicon_notes.editable = true;
					}
					else{
						this.lexusUsers1.enabled = false;
						this.lexusUsers2.enabled = false;
						this.remove_reader.enabled = false;
						this.remove_writer.enabled = false;
						this.remove_lexicon.toolTip = "remove shared lexicon from my workspace";
						this.remove_lexicon.enabled = true;
						this.lexicon_name.editable = false;
						this.lexicon_description.editable = false;
						this.lexicon_notes.editable = false;
					}
				}
			}
			private function newLexicon( event:MouseEvent):void{
				var pop2:LexiconDetail = LexiconDetail(PopUpManager.createPopUp(this,LexiconDetail,true));
    			pop2.addEventListener("updateLexicon", this.handleNewLexiconUpdate);
    			PopUpManager.centerPopUp(pop2);
			}
			private function handleNewLexiconUpdate(event:Event):void {
				var ld:LexiconDetail = event.currentTarget as LexiconDetail;
				(this.lexicaList.dataProvider as ArrayCollection).addItem(ld.lexicon);
				FlexGlobals.topLevelApplication.switchToSchemaEditor(ld.lexicon.id);
			}
			private function removeLexicon(event:MouseEvent):void {
				YesNo.confirmDelete("Are you sure you want to remove this lexicon?", confirmDeleteLexiconHandler);
			}
			private function confirmDeleteLexiconHandler( event:CloseEvent):void{
				if (event.detail == Alert.YES) {
					FlexGlobals.topLevelApplication.enabled = false;
					LexusUtil.showWait(this, "Deleting lexicon");
					this.lexusService.send("LexusWorkspaceEditor/deleteLexicon.json", lexicaList.selectedItem, this.name, onDeleteLexiconResult);	
				} 
			}
			
			private function onDeleteLexiconResult( event:ResultEvent):void{
				var idx:int = lexicaList.selectedIndex;
				(lexicaList.dataProvider as ArrayCollection).removeItemAt( idx);
				lexicaList.selectedIndex = idx;	
				showLexicon();
				FlexGlobals.topLevelApplication.enabled = true;
				LexusUtil.removeWait();
			}
			/**
			 * This method is called when changes to the lexicon are made that sould be propagated to the server at the appropriate cut point.
			 * Cut points are points in the execution process where changes are propagated to the server.
			 **/ 
			private function onChange( event:Event):void{
				
				this.markLexiconSavePoint();
				if(event.currentTarget == this.lexicon_name)
					this.refreshLexicaList();
				
			}
			/**
			 * Forces the lexica list to refresh. This method is called by the onChange of the lexicon_name edit field
			 **/ 
			private function refreshLexicaList():void{
				this.lexicaList.invalidateDisplayList();
			}
			private function getLexiconLabel(item:Object):String{
				var admin:Boolean = false;
				if (FlexGlobals.topLevelApplication.lexusUser) {
					admin = FlexGlobals.topLevelApplication.lexusUser.administrator;
				}
				var owner:String = item.owner.name;
				return item.name + " ["+ (item.expectedSize == null?"":item.expectedSize+"/") + item.size + "]" +
					(admin ? ' (' + owner + ')' : '');
			}
			private function getLexiconIcon( item:Object):Class{
				if( item.id==null || item.isNew){
					return this.newLexiconIcon;	
				}
				else if(item.shared)
					return this.sharedLexiconIconClass;
				else
					return FlexGlobals.topLevelApplication.lexiconIconClass;
			}
			
			
			
   			private function getUserIcon( item:Object):Class{
   				return this.userIcon;
   			}
			/**
			 * Handles the drag enter event for users
			 **/
			private function onUserDragEnter(evt:DragEvent):void{
				var dropTarget:AutoSizeList = AutoSizeList(evt.currentTarget);
				var uiComp:IUIComponent = evt.dragInitiator;
				
				if( (uiComp == activeUsers1 || uiComp == activeUsers2 )&& evt.dragSource.hasFormat( "items")){
					DragManager.showFeedback(DragManager.MOVE);
					DragManager.acceptDragDrop(dropTarget);
				}
			
				else {
                  DragManager.showFeedback(DragManager.NONE);
                  return;     	
                }
			}
			/**
			 * Handles the drag over event on the tree
			 **/
			private function onUserDragOver( evt:DragEvent):void{
				evt.preventDefault();
                evt.currentTarget.showDropFeedback(evt);

                var dropTarget:AutoSizeList= AutoSizeList(evt.target);
                var r:int = dropTarget.calculateDropIndex(evt);
                
                var items:ArrayCollection = (dropTarget.dataProvider as ArrayCollection);
                
                var dropEnabled:Boolean = true;
                for( var i:int = 0; i < items.length; i++){
                	if( items[i].id == (evt.dragInitiator as AutoSizeList).selectedItem.id){
                		dropEnabled = false;
                		break;
                	}
                		
                }
               
                if( dropEnabled){
                	DragManager.showFeedback(DragManager.MOVE);
					DragManager.acceptDragDrop(dropTarget);
                }
                else{
                	DragManager.showFeedback(DragManager.NONE);
                     return;
                }
                
			}
			/**
			 * Handles the drag drop event on the tree
			 **/
			private function onUserDragDrop( evt: DragEvent):void{
				evt.preventDefault();
                evt.currentTarget.hideDropFeedback(evt);
			    var dropTarget:AutoSizeList=AutoSizeList(evt.currentTarget);   
				var items:ArrayCollection = (dropTarget.dataProvider as ArrayCollection);
				items.addItem( (evt.dragInitiator as AutoSizeList).selectedItem); 
				//We'll mark the current lexicon to be saved
				this.markLexiconSavePoint();               
                 
			}
			private function removeUser( event:MouseEvent):void{
				var activeList:AutoSizeList = null;
				if( event.currentTarget == remove_reader)
					activeList = readerList;
				else if( event.currentTarget == remove_writer)
					activeList = writerList;
				else
					return;
				
				var items:ArrayCollection = (activeList.dataProvider as ArrayCollection);
				var idx:int = activeList.selectedIndex;
				if( idx <0)
					return;
				else if( idx >= activeList.dataProvider.length)
					return;
				items.removeItemAt( idx);
				activeList.selectedIndex = idx;
				this.markLexiconSavePoint();

				
			}
			/**
			 * Requests the list of users form lexus
			 **/ 
			private function loadLexusUsers():void{
				if( userData==null)
					
					this.lexusService.send("LexusWorkspaceEditor/getProfiles.json", null, this.name, onJSONLoadUsers);
					
					this.loadUsers1.enabled=false;
					//this.loadUsers1.visible=false;
					this.loadUsers2.enabled=false;
					//this.loadUsers2.visible=false;
					
			}
			
			
			/**
			 * Returns the icon identifying a sort order
			 **/ 
			private function getSortOrderIcon( item:Object):Class{
				return this.sortOrderIconClass;
			}
			private function onSortOrderListChange(evt:ListEvent):void{	
				if( this.sortOrders.selectedItem != this.saveSortOrderTarget)
					this.requestSortOrderSave();	
			}
			private function requestSortOrderSave():void {
				if( this.saveSortOrderTarget != null) {
					YesNo.confirmSave("Do you want to save sort order "+this.saveSortOrderTarget.name+"?", confirmSaveSortOrderHandler);
					
				}
			}
			private function confirmSaveSortOrderHandler(event:CloseEvent):void{
				if( event.detail == Alert.YES){
					FlexGlobals.topLevelApplication.enabled = false;
					this.save();
					//this.lexusService.send("LexusWorkspaceEditor/loadSortOrder.json", this.saveSortOrderTarget, this.name, onSortOrderReload)
					this.saveSortOrderTarget = null;
					FlexGlobals.topLevelApplication.enabled = true; 
				}
				else if(event.detail == Alert.NO){
					FlexGlobals.topLevelApplication.enabled = true;
					LexusUtil.showWait(this, "Reloading sortorder");
					this.lexusService.send("LexusWorkspaceEditor/loadSortOrder.json", this.saveSortOrderTarget, this.name, onSortOrderReload);
					this.saveSortOrderTarget = null;
				}
			}
			
			private function onSortOrderReload(event:ResultEvent):void {
				LexusUtil.parseJSON(String(event.result),
					function(data:Object):void {
						if (data.result.sortOrder !== undefined && null != data.result.sortOrder) { 
							var coll:ICollectionView = (sortOrders.dataProvider as ICollectionView);
							var cursor:IViewCursor = coll.createCursor();
							while( !cursor.afterLast){
								if( cursor.current.id == data.result.sortOrder.id){
									cursor.remove();
									cursor.insert(data.result.sortOrder);
									break;
								}
								cursor.moveNext();
							}
						}
						FlexGlobals.topLevelApplication.enabled = true;
						LexusUtil.removeWait();						
					}
				);
			}
			private function onSortOrderChange( event:SortOrderChangeEvent):void{
				this.markSortOrderSavePoint( event.sortOrder);
				//this.saveSortOrderTarget = event.sortOrder;
				this.refreshSortOrderList();
			}
			
			/**
			 * Forces the sort orders list to refresh.
			 **/ 
			private function refreshSortOrderList():void{
				this.sortOrders.invalidateDisplayList();
			}
			
			
			
			private function removeSortOrder( event:MouseEvent):void{
				YesNo.confirmDelete("Are you sure you want to remove this sort order?", confirmDeleteSortOrderHandler);
			}
			private function confirmDeleteSortOrderHandler( event:CloseEvent):void{
				if (event.detail == Alert.YES) {
					FlexGlobals.topLevelApplication.enabled = false;
					LexusUtil.showWait(this, "Removing sortorder");
					this.lexusService.send("LexusWorkspaceEditor/deleteSortOrder.json", sortOrders.selectedItem, this.name, onDeleteSortOrderResult);	
				} 
			}
			private function onDeleteSortOrderResult( event:ResultEvent):void{
				var idx:int = sortOrders.selectedIndex;
				(sortOrders.dataProvider as ArrayCollection).removeItemAt(idx);
				var length:int = (sortOrders.dataProvider as ArrayCollection).length;
				if (idx > length - 1) {
					idx = length - 1;					
				}
				sortOrders.selectedIndex = idx;
				FlexGlobals.topLevelApplication.enabled = true;
				LexusUtil.removeWait();				
			}
			private function newSortOrder( event: MouseEvent):void{
				var pop2:AddSortOrder = AddSortOrder(PopUpManager.createPopUp(this,AddSortOrder,true));
    			pop2.addEventListener("newSortOrder", this.handleNewSortOrderUpdate);
    			PopUpManager.centerPopUp(pop2);
			}
			private function handleNewSortOrderUpdate(event:Event):void{
				(this.sortOrders.dataProvider as ArrayCollection).addItem( ((event.currentTarget as AddSortOrder).sortOrder));
			}

			private function openLexicon():void {
				FlexGlobals.topLevelApplication._openLexiconBrowser(this.lexicaList.selectedItem.id);
			}

			private function goToLexicon(event:MouseEvent):void {
				requestSave();
				if (event.shiftKey) {
					FlexGlobals.topLevelApplication._openSchemaEditor(this.lexicaList.selectedItem.id);
				}
				else {
					openLexicon();
				}
			}			
		]]>
	</mx:Script>
	<mx:VBox id="main" width="100%" height="100%" verticalGap="0" 
			focusIn="FlexGlobals.topLevelApplication.overlayUnicodeInput(event)">
		<mx:Panel width="100%" height="100%"
			status="Workspace"
			statusStyleName="panelStatus"
			title="{FlexGlobals.topLevelApplication.lexusUser.administrator == true ? 'Administrator' : ''}"
			titleStyleName="{FlexGlobals.topLevelApplication.lexusUser.administrator == true ? 'panelTitleAdministrator' : ''}"
			backgroundAlpha="0.0" borderAlpha="0.0">
			<mx:Canvas width="100%" height="100%" backgroundColor="#F5F7D5">
				<mx:TabNavigator width="100%" height="100%" creationPolicy="all"
					change="leftTabChanged(event)" id="tabberd">
					<mx:Canvas id="lexiconTab" label="Lexica" width="100%" height="100%">
						<mx:HBox width="100%" height="100%" paddingLeft="4" paddingRight="4" paddingBottom="4">
							<mx:Panel width="25%" height="100%" title="Available lexica">
								<mpi:AutoSizeList id="lexicaList" width="100%" height="100%" left="10"
									right="10" dataProvider="{serverData.result.myLexica}"
									doubleClickEnabled="true" doubleClick="goToLexicon(event)"
									change="lexiconClicked(event)" labelFunction="getLexiconLabel"
									iconFunction="getLexiconIcon" selectedIndex="0" toolTip="Double click to go to the lexicon. Shift-double click to go the schema editor."/>
								<mx:ControlBar horizontalAlign="left" width="100%">
									<mx:Image
										source="{FlexGlobals.topLevelApplication.addIcon}"
										click="newLexicon(event)" toolTip="Add lexicon"/>
									<mx:Image id="remove_lexicon"
										source="{FlexGlobals.topLevelApplication.removeIcon}"
										click="removeLexicon(event)" toolTip="Remove lexicon"/>
								</mx:ControlBar>
							</mx:Panel>
							<mx:VBox width="75%" height="100%" right="50" left="50">
								<mx:TabNavigator width="100%" height="75%" creationPolicy="all">
									<mx:Canvas id="lexiconDetailsTab" label="Lexicon" width="100%"
										height="100%">

										<mx:Grid width="100%" height="100%">
											<mx:GridRow width="80%" height="10%">
												<mx:GridItem width="80">
												<mx:Label text="Name:"/>
												</mx:GridItem>
												<mx:GridItem width="100%">
												<mx:TextInput id="lexicon_name" width="80%"
												height="100%" change="onChange(event)"/>
												</mx:GridItem>
											</mx:GridRow>
											<mx:GridRow width="80%" height="70%" autoLayout="true">
												<mx:GridItem width="80">
												<mx:Label text="Description:"/>
												</mx:GridItem>
												<mx:GridItem width="100%">
												<mx:TextArea id="lexicon_description" width="80%"
												height="100%"  change="onChange(event)"/>
												</mx:GridItem>

											</mx:GridRow>
											
											<mx:GridRow width="80%" height="10%" autoLayout="true">
												<mx:GridItem width="80">
													<mx:Label text="Owner:"/>
												</mx:GridItem>
												<mx:GridItem width="100%">
													<mx:TextArea id="lexicon_owner" width="80%" editable="false"
																 height="100%"/>
												</mx:GridItem>
												
											</mx:GridRow>
										</mx:Grid>
									</mx:Canvas>
									<mx:Canvas id="readersTab" label="Readers" width="100%"
										height="100%">
										<mx:HBox width="80%" height="60%" horizontalAlign="center"
											paddingTop="10" paddingLeft="10" paddingRight="10"
											paddingBottom="10">
											<mx:Panel title="Readers" width="40%" height="100%" horizontalAlign="left">
												<mpi:AutoSizeList id="readerList" width="100%" maxHeight="500"
												dataProvider="{lexicaList.selectedItem.readers}"
												labelField="name" iconFunction="getUserIcon"
												dropEnabled="true"
												dragEnter="onUserDragEnter(event)"
												dragOver="onUserDragOver( event)"
												dragDrop="onUserDragDrop(event)"/>
												<mx:ControlBar horizontalAlign="center" width="100%">
												<mx:Button id="remove_reader" label="Remove"
												click="removeUser(event)"/>
												</mx:ControlBar>
											</mx:Panel>
											<mx:Spacer width="20%" height="100%"/>
											<mx:Panel id="lexusUsers1" title="Lexus users"
												width="40%" height="100%" horizontalAlign="right">
									

												<mpi:AutoSizeList id="activeUsers1" width="100%"
												maxHeight="500"
												labelField="name" iconFunction="getUserIcon"
												dragEnabled="true"/>
												<mx:ControlBar horizontalAlign="center"
												width="100%">
												<mx:Button id="loadUsers1" label="Load users"
												click="this.loadLexusUsers()"/>
												</mx:ControlBar>
											</mx:Panel>
										</mx:HBox>
									</mx:Canvas>
									<mx:Canvas id="writersTab" label="Writers" width="100%"
										height="100%">
										<mx:HBox width="80%" height="60%" horizontalAlign="center"
												 paddingTop="10" paddingLeft="10" paddingRight="10"
												 paddingBottom="10">
											<mx:Panel title="Writers" width="40%" height="100%" horizontalAlign="left">
												<mpi:AutoSizeList id="writerList" width="100%" maxHeight="500"
												dataProvider="{lexicaList.selectedItem.writers}"
												labelField="name" iconFunction="getUserIcon"
												dropEnabled="true"
												dragEnter="onUserDragEnter(event)"
												dragOver="onUserDragOver( event)"
												dragDrop="onUserDragDrop(event)"/>
												<mx:ControlBar horizontalAlign="center" width="100%">
												<mx:Button id="remove_writer" label="Remove"
												click="removeUser(event)"/>
												</mx:ControlBar>
											</mx:Panel>
											<mx:Spacer width="20%" height="100%"/>
											<mx:Panel id="lexusUsers2" title="Lexus users"
												width="40%" height="100%" horizontalAlign="right">
												<mpi:AutoSizeList id="activeUsers2" width="100%"
												maxHeight="500"
												labelField="name" iconFunction="getUserIcon"
												dragEnabled="true"/>
												<mx:ControlBar horizontalAlign="center"
												width="100%">
												<mx:Button id="loadUsers2" label="Load users"
												click="this.loadLexusUsers()"/>
												</mx:ControlBar>
											</mx:Panel>
										</mx:HBox>
									</mx:Canvas>
								</mx:TabNavigator>
								<mx:TabNavigator width="100%" height="35%" creationPolicy="all">
									<mx:Panel id="notesTab" label="Notes" width="100%" height="100%"
										icon="{FlexGlobals.topLevelApplication.noteIcon}" verticalAlign="middle"
										horizontalAlign="center">
										<mx:TextArea id="lexicon_notes" width="100%" height="100%"
											change="onChange(event)" alpha="0.7"
											paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10"/>
									</mx:Panel>
								</mx:TabNavigator>
							</mx:VBox>
						</mx:HBox>
					</mx:Canvas>
					<mx:Canvas id="sortOrdersTab" label="Sort orders" width="100%" height="100%">
						<mx:HBox width="100%" height="100%" paddingLeft="4" paddingRight="4" paddingBottom="4">
							<mx:Panel width="25%" height="100%" title="Available sort orders">
								<mpi:AutoSizeList id="sortOrders" width="100%" height="100%"
									dataProvider="{serverData.result.sortOrders}"
									change="onSortOrderListChange(event)" labelField="name"
									iconFunction="getSortOrderIcon" selectedIndex="0"/>
								<mx:ControlBar horizontalAlign="left" width="100%">
									<mx:Image
										source="{FlexGlobals.topLevelApplication.addIcon}"
										click="newSortOrder(event)" toolTip="Add sort order"/>
									<mx:Image
										source="{FlexGlobals.topLevelApplication.removeIcon}"
										click="removeSortOrder(event)" toolTip="Remove sort order"/>
								</mx:ControlBar>
							</mx:Panel>
							<mx:Canvas id="sortOrderEditorTab" label="Sort order editor"
								width="75%" height="100%">
								<local:SortOrderComponent id="sortOrderComponent" width="100%"
									height="100%" sortOrder="{sortOrders.selectedItem}"/>
							</mx:Canvas>
						</mx:HBox>
					</mx:Canvas>
					<mx:Canvas label="Search" id="searchTab">
						<mx:HBox width="100%" height="100%" paddingLeft="4" paddingRight="4" paddingBottom="4" paddingTop="0" verticalGap="0">
							<mx:Canvas label="Search" width="100%" height="100%">
								<local:SearchComponent id="searchComponent" width="100%"
													   height="100%"
													   lexica="{serverData.result.myLexica}"/>
							</mx:Canvas>
						</mx:HBox>
					</mx:Canvas>
				</mx:TabNavigator>
			</mx:Canvas>
		</mx:Panel>
	</mx:VBox>
	
	<mx:Binding source="this.lexicon_name.text" destination="this.lexicaList.selectedItem.name"/>
	<mx:Binding source="this.lexicon_description.text"
		destination="this.lexicaList.selectedItem.description"/>
	<mx:Binding source="this.lexicon_notes.text" destination="this.lexicaList.selectedItem.note"/>
	<mx:Binding source="{this.lexicaList.selectedItem.owner.name + ' (' + this.lexicaList.selectedItem.owner.id + ')'}" destination="this.lexicon_owner.text"/>
</mx:Module>

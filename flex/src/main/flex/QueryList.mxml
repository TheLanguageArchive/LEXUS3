<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="400" height="300" xmlns:com="com.*">
	<mx:Script>
		<![CDATA[

			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.ListEvent;
			import mx.rpc.events.ResultEvent;
			
			import nl.mpi.lexus.LexusUtil;
			import nl.mpi.lexus.YesNo;
			import nl.mpi.lexus.event.QueryEvent;
			import nl.mpi.lexus.service.LexusService;
			
			
			[Bindable] public var _queries: Array;
			
			/* Define a variable to be able to change the texts. Later, when we grow up we might have i18n, then a single var will be handy. */
			[Bindable] public var texts_code:String = "query";
			
			
			[Bindable] public var queryEditor:QueryEditor;
			
			private var lexusService: LexusService = new LexusService();

			/**
			* The lexicon for this QueryBuilder.
			*/
			private var _lexicon: Object = null;
			
			
			public function set queries(data: Array): void {
			    _queries = data;
			    init();
			}

			public function get queries(): Array {
				return _queries;
			}
			
			
			public function set lexicon(lexicon: Object): void {
			    this._lexicon = lexicon;
			}
			
			private function init(): void {
			    if (this._queries != null) {
			        // Before we set the index we'll need the tree first
			        //See: http://butterfliesandbugs.wordpress.com/2007/11/08/workaround-for-selectedindex-on-tree-not-showing-up/
			        queryList.invalidateList();
			        queryList.selectedIndex = -1;
			    }
			}
			
			private function getQueryIcon(item: Object): Class {
			    return FlexGlobals.topLevelApplication.lexiconIconClass;
			}
			
			private function selectedItemChanged(event: ListEvent): void {
				if (queryEditor.saveNeeded()) {
					YesNo.confirmSave("Do you want to save the modified query?",
						function(event:CloseEvent):void {
							if (event.detail == Alert.YES) {
								queryEditor.save();
							}				
						}
					);
				}
				queryEditor.query = queryList.selectedItem;
			}
			
			
			/**
			* Rquest user input confirmation for removing a query element.
			**/
			private function requestRemoveQueryElement(): void {
				YesNo.confirmDelete("Are you sure you want to remove this query?", confirmDeleteHandler);
			}
			/**
			* Handles the remove query element confirmation decission obtained from the user
			**/
			private function confirmDeleteHandler(event: CloseEvent): void {
			    if (event.detail == Alert.YES) {
			        var selItem: Object = queryList.selectedItem;
			        queryList.selectedIndex = (queryList.selectedIndex - 1);
		            var children1: ArrayCollection = (queryList.dataProvider as ArrayCollection);
		            var param: Object = new Object();
		            param.query = selItem;
					if (_lexicon != null) {
						param.lexicon = _lexicon.id;
					}
		            this.lexusService.send("QueryBuilder/deleteQuery.json", param, this.name, onDeleteQuery);
			        queryList.invalidateDisplayList();
			        queryList.invalidateList();
			    }
			}
			private function onDeleteQuery(event: ResultEvent): void {
				LexusUtil.parseJSON(String(event.result),
					function(data:Object):void {  
					    var delQueryID:String = data.result.id;
					    var queries:ArrayCollection = (queryList.dataProvider as ArrayCollection);
					    var index:int = - 1;
					    for (var i: int = 0; i < queries.length; i++) {
					        if (queries.getItemAt(i).id == delQueryID) {
					            index = i;
					            break;
					        }
					    }
					    if (index != - 1) {
							var savedQuery:Object = queries.getItemAt(index);
					    	queries.removeItemAt(index);
							queryEditor.query = queryList.selectedItem;
							
							var event:QueryEvent = new QueryEvent(QueryEvent.DELETE, savedQuery);
							dispatchEvent(event);
						}
					    else {
			    			YesNo.alert("Unable to synchronize with server");
						}
					}
				);
			}
			
			
			/**
			* Opens the popup for adding a new Query.
			**/
			private function addQueryElement(): void {
				if (queryEditor.saveNeeded()) {
					YesNo.confirmSave("Do you want to save the modified query?",
						function(event:CloseEvent):void {
							if (event.detail == Alert.YES) {
								queryEditor.save();
							}				
						}
					);
				}
				if (_queries == null) {
					_queries = new Array();
				}
				var newQuery:Object = { "id": "", "name" : "New query", "description" : "", "type" : "query", "children" : [], "isBranch":"true" };
				_queries.push(newQuery);
				queryList.invalidateList();
				queryList.selectedIndex = _queries.length;
				queryEditor.query = newQuery;
				queryEditor.editNewQuery();
			}

			
			/**
			* Handles the update event from the popup handling creation or modification of a query element
			**/
			public function querySaved(query:Object): void {
				var event:QueryEvent;
		        var queries:ArrayCollection = (queryList.dataProvider as ArrayCollection);
				var found:Boolean = false;
				var added:Boolean = false;
				var i:int = -1;
				for (i = 0 ; i < queries.length ; i++) {
					if (queries.getItemAt(i).id == query.id || queries.getItemAt(i).id == "") {
						found = true;
						if (queries.getItemAt(i).id == "")
							added = true;
						queries.setItemAt(query, i);
						break;
					}
				}
				event = new QueryEvent(added ? QueryEvent.ADD : QueryEvent.SAVE, query);
				dispatchEvent(event);
		        queryList.selectedIndex = i;  
			}
			
			
		]]>
	</mx:Script>

	<mx:Panel horizontalAlign="left" title="{texts_code=='query' ? 'Queries' : 'Filters'}" height="100%" width="100%">
		<mx:List id="queryList" width="100%" height="100%" labelField="name" 
			iconFunction="getQueryIcon" change="selectedItemChanged(event)" selectedIndex="-1"
			dataProvider="{_queries}"/>
		<mx:ControlBar horizontalAlign="left" width="100%">
			<mx:Image id="QL_addBTN" source="{FlexGlobals.topLevelApplication.addIcon}"
				click="addQueryElement()" toolTip="Add {texts_code=='query' ? 'query' : 'filter'}"/>
			<mx:Image id="QL_removeBTN" source="{FlexGlobals.topLevelApplication.removeIcon}"
				click="requestRemoveQueryElement()" toolTip="Remove {texts_code=='query' ? 'query' : 'filter'}"/>
		</mx:ControlBar>
	</mx:Panel>
</mx:Canvas>
